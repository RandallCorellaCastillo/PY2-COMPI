// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/py01compiladores/lexer.flex

/* JFlex example: partial Java language lexer specification */
package py01compiladores;
import java_cup.runtime.*;

/**
 * This class is a simple example lexer.
 */

@SuppressWarnings("fallthrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int STRING_SINGLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23"+
    "\1\24\1\25\1\26\1\27\1\30\2\0\32\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\0\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\31\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\31\1\56\1\57"+
    "\1\60\1\61\1\31\1\62\3\31\1\0\1\63\10\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\16\24\1\1\1\31\1\32\1\33"+
    "\1\31\1\34\1\33\1\35\1\36\1\37\1\40\1\41"+
    "\1\0\1\2\1\0\1\41\1\42\1\43\1\44\13\24"+
    "\1\45\1\46\12\24\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\2\0\10\24\1\55\2\24\1\56\1\57\12\24"+
    "\1\0\1\2\1\60\1\24\1\61\1\62\1\24\1\63"+
    "\2\24\1\64\1\65\1\66\3\24\1\67\3\24\1\70"+
    "\1\24\1\71\1\24\1\72\1\73\1\74\1\75\1\76"+
    "\3\24\1\77\1\24\1\100\1\101\1\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\234\0\320\0\u0104\0\234"+
    "\0\234\0\u0138\0\234\0\234\0\234\0\234\0\u016c\0\234"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\234\0\234\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\234\0\234\0\234\0\234\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\234"+
    "\0\u06b4\0\u06e8\0\234\0\u071c\0\234\0\234\0\234\0\234"+
    "\0\u01d4\0\u0750\0\u0784\0\u01d4\0\u023c\0\234\0\234\0\234"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u0340\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\234"+
    "\0\234\0\234\0\234\0\234\0\234\0\u0c30\0\u0c64\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0340"+
    "\0\u0e38\0\u0e6c\0\u0340\0\u0340\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u0c30"+
    "\0\u0340\0\u10dc\0\u0340\0\u0340\0\u1110\0\u0340\0\u1144\0\u1178"+
    "\0\u0340\0\u0340\0\u0340\0\u11ac\0\u11e0\0\u1214\0\u0340\0\u1248"+
    "\0\u127c\0\u12b0\0\u0340\0\u12e4\0\u0340\0\u1318\0\u0340\0\u0340"+
    "\0\u0340\0\u0340\0\u0340\0\u134c\0\u1380\0\u13b4\0\u0340\0\u13e8"+
    "\0\u0340\0\u0340\0\u0340\0\u0340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\4\1\35\1\36\1\37\1\33\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\33\1\46\1\33"+
    "\1\47\1\50\2\33\1\51\1\52\1\53\1\54\1\33"+
    "\1\55\1\56\2\57\1\0\1\57\1\0\1\57\1\60"+
    "\24\57\1\61\30\57\2\62\1\0\1\62\1\0\4\62"+
    "\1\63\21\62\1\64\30\62\66\0\1\5\110\0\1\65"+
    "\44\0\1\66\70\0\1\67\65\0\1\70\66\0\2\71"+
    "\54\0\1\72\4\0\1\73\62\0\1\74\1\0\2\75"+
    "\60\0\1\74\1\0\2\25\67\0\1\76\63\0\1\77"+
    "\63\0\1\100\56\0\2\33\5\0\1\33\5\0\24\33"+
    "\23\0\2\33\5\0\1\33\5\0\15\33\1\101\1\33"+
    "\1\102\4\33\23\0\2\33\5\0\1\33\5\0\1\103"+
    "\6\33\1\104\14\33\23\0\2\33\5\0\1\33\5\0"+
    "\4\33\1\105\17\33\23\0\2\33\5\0\1\33\5\0"+
    "\12\33\1\106\11\33\23\0\2\33\5\0\1\33\5\0"+
    "\1\107\11\33\1\110\2\33\1\111\4\33\1\112\1\33"+
    "\23\0\2\33\5\0\1\33\5\0\12\33\1\113\11\33"+
    "\23\0\2\33\5\0\1\33\5\0\5\33\1\114\6\33"+
    "\1\115\7\33\23\0\2\33\5\0\1\33\5\0\15\33"+
    "\1\116\6\33\23\0\2\33\5\0\1\33\5\0\1\117"+
    "\23\33\23\0\2\33\5\0\1\33\5\0\1\120\16\33"+
    "\1\121\4\33\23\0\2\33\5\0\1\33\5\0\1\122"+
    "\3\33\1\123\17\33\23\0\2\33\5\0\1\33\5\0"+
    "\21\33\1\124\1\33\1\125\23\0\2\33\5\0\1\33"+
    "\5\0\17\33\1\126\4\33\23\0\2\33\5\0\1\33"+
    "\5\0\7\33\1\127\14\33\64\0\1\130\2\57\1\0"+
    "\1\57\1\0\1\57\1\0\24\57\1\0\30\57\6\0"+
    "\1\131\44\0\1\132\2\0\1\133\1\0\1\134\3\0"+
    "\2\62\1\0\1\62\1\0\4\62\1\0\21\62\1\0"+
    "\30\62\11\0\1\135\41\0\1\132\2\0\1\133\1\0"+
    "\1\134\3\0\14\136\1\137\47\136\2\73\1\5\1\73"+
    "\1\6\57\73\22\0\2\33\5\0\1\33\5\0\15\33"+
    "\1\140\6\33\23\0\2\33\5\0\1\33\5\0\4\33"+
    "\1\141\17\33\23\0\2\33\5\0\1\33\5\0\20\33"+
    "\1\142\3\33\23\0\2\33\5\0\1\33\5\0\1\143"+
    "\23\33\23\0\2\33\5\0\1\33\5\0\5\33\1\144"+
    "\16\33\23\0\2\33\5\0\1\33\5\0\20\33\1\145"+
    "\3\33\23\0\2\33\5\0\1\33\5\0\12\33\1\146"+
    "\11\33\23\0\2\33\5\0\1\33\5\0\15\33\1\147"+
    "\6\33\23\0\2\33\5\0\1\33\5\0\17\33\1\150"+
    "\4\33\23\0\2\33\5\0\1\33\5\0\14\33\1\151"+
    "\7\33\23\0\2\33\5\0\1\33\5\0\15\33\1\152"+
    "\6\33\23\0\2\33\5\0\1\33\5\0\21\33\1\153"+
    "\2\33\23\0\2\33\5\0\1\33\5\0\2\33\1\154"+
    "\21\33\23\0\2\33\5\0\1\33\5\0\10\33\1\155"+
    "\13\33\23\0\2\33\5\0\1\33\5\0\17\33\1\156"+
    "\4\33\23\0\2\33\5\0\1\33\5\0\10\33\1\157"+
    "\13\33\23\0\2\33\5\0\1\33\5\0\14\33\1\160"+
    "\7\33\23\0\2\33\5\0\1\33\5\0\1\161\20\33"+
    "\1\162\2\33\23\0\2\33\5\0\1\33\5\0\17\33"+
    "\1\163\4\33\23\0\2\33\5\0\1\33\5\0\10\33"+
    "\1\164\13\33\23\0\2\33\5\0\1\33\5\0\22\33"+
    "\1\165\1\33\23\0\2\33\5\0\1\33\5\0\10\33"+
    "\1\166\13\33\1\0\14\136\1\167\63\136\1\167\4\136"+
    "\1\170\42\136\22\0\2\33\5\0\1\33\5\0\12\33"+
    "\1\171\11\33\23\0\2\33\5\0\1\33\5\0\1\172"+
    "\23\33\23\0\2\33\5\0\1\33\5\0\4\33\1\173"+
    "\17\33\23\0\2\33\5\0\1\33\5\0\17\33\1\174"+
    "\4\33\23\0\2\33\5\0\1\33\5\0\1\175\23\33"+
    "\23\0\2\33\5\0\1\33\5\0\4\33\1\176\17\33"+
    "\23\0\2\33\5\0\1\33\5\0\20\33\1\177\3\33"+
    "\23\0\2\33\5\0\1\33\5\0\1\200\23\33\23\0"+
    "\2\33\5\0\1\33\5\0\2\33\1\201\21\33\23\0"+
    "\2\33\5\0\1\33\5\0\1\33\1\202\22\33\23\0"+
    "\2\33\5\0\1\33\5\0\14\33\1\203\7\33\23\0"+
    "\2\33\5\0\1\33\5\0\1\204\23\33\23\0\2\33"+
    "\5\0\1\33\5\0\14\33\1\205\7\33\23\0\2\33"+
    "\5\0\1\33\5\0\6\33\1\206\15\33\23\0\2\33"+
    "\5\0\1\33\5\0\3\33\1\207\20\33\23\0\2\33"+
    "\5\0\1\33\5\0\22\33\1\210\1\33\23\0\2\33"+
    "\5\0\1\33\5\0\10\33\1\211\13\33\23\0\2\33"+
    "\5\0\1\33\5\0\21\33\1\212\2\33\23\0\2\33"+
    "\5\0\1\33\5\0\4\33\1\213\17\33\23\0\2\33"+
    "\5\0\1\33\5\0\12\33\1\214\11\33\1\0\14\136"+
    "\1\167\4\136\1\5\42\136\22\0\2\33\5\0\1\33"+
    "\5\0\11\33\1\215\12\33\23\0\2\33\5\0\1\33"+
    "\5\0\22\33\1\216\1\33\23\0\2\33\5\0\1\33"+
    "\5\0\4\33\1\217\17\33\23\0\2\33\5\0\1\33"+
    "\5\0\21\33\1\220\2\33\23\0\2\33\5\0\1\33"+
    "\5\0\13\33\1\221\10\33\23\0\2\33\5\0\1\33"+
    "\5\0\21\33\1\222\2\33\23\0\2\33\5\0\1\33"+
    "\5\0\4\33\1\223\17\33\23\0\2\33\5\0\1\33"+
    "\5\0\17\33\1\224\4\33\23\0\2\33\5\0\1\33"+
    "\5\0\14\33\1\225\7\33\23\0\2\33\5\0\1\33"+
    "\5\0\2\33\1\226\21\33\23\0\2\33\5\0\1\33"+
    "\5\0\4\33\1\227\17\33\23\0\2\33\5\0\1\33"+
    "\5\0\12\33\1\230\11\33\23\0\2\33\5\0\1\33"+
    "\5\0\14\33\1\231\7\33\23\0\2\33\5\0\1\33"+
    "\5\0\6\33\1\232\15\33\23\0\2\33\5\0\1\33"+
    "\5\0\7\33\1\233\14\33\23\0\2\33\5\0\1\33"+
    "\5\0\21\33\1\234\2\33\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5148];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\2\11\1\1\4\11\1\1\1\11"+
    "\5\1\2\11\4\1\4\11\20\1\1\11\2\1\1\11"+
    "\1\1\4\11\1\1\1\0\1\1\1\0\1\1\3\11"+
    "\27\1\6\11\2\0\27\1\1\0\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }
  private Symbol symbol(int type, int yyline, int yycolumn, String value) {
      return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { String errLex = "Error léxico : "+ yytext() + "en la linea: " +  (yyline+1) +  "y columna: " +  (yycolumn+1);
    //System.out.println(errLex);
            }
          // fall through
          case 68: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 69: break;
          case 3:
            { return symbol(sym.NOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 70: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 71: break;
          case 5:
            { return symbol(sym.MOD, yyline, yycolumn, yytext());
            }
          // fall through
          case 72: break;
          case 6:
            { string.setLength(0); yybegin(STRING_SINGLE);
            }
          // fall through
          case 73: break;
          case 7:
            { return symbol(sym.PARENTA, yyline, yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 8:
            { return symbol(sym.PARENTC, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 9:
            { return symbol(sym.TIMES, yyline, yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 10:
            { return symbol(sym.PLUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 77: break;
          case 11:
            { return symbol(sym.COMA, yyline, yycolumn, yytext());
            }
          // fall through
          case 78: break;
          case 12:
            { return symbol(sym.MINUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 13:
            { return symbol(sym.DIV, yyline, yycolumn, yytext());
            }
          // fall through
          case 80: break;
          case 14:
            { return symbol(sym.INTEGER_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 15:
            { return symbol(sym.SEP, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 16:
            { return symbol(sym.ENDLINE, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 17:
            { return symbol(sym.LOWERT, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 18:
            { return symbol(sym.EQ, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 19:
            { return symbol(sym.GREATERT, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 20:
            { return symbol(sym.IDENTIFIER, yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 21:
            { return symbol(sym.PARENTCA, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 22:
            { return symbol(sym.PARENTCC, yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 23:
            { return symbol(sym.POT, yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 24:
            { return symbol(sym.UNDERS, yyline, yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 25:
            { string.append( yytext() );
            }
          // fall through
          case 92: break;
          case 26:
            { yybegin(YYINITIAL); 
                                   return symbol(sym.STRING_LITERAL, 
                                   string.toString());
            }
          // fall through
          case 93: break;
          case 27:
            { string.append('\\');
            }
          // fall through
          case 94: break;
          case 28:
            { yybegin(YYINITIAL); 
                                   return symbol(sym.STRING_SINGLE, 
                                   string.toString());
            }
          // fall through
          case 95: break;
          case 29:
            { return symbol(sym.NOTEQUALS, yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 30:
            { return symbol(sym.CONJUNTION, yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 31:
            { return symbol(sym.PLUSP, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 32:
            { return symbol(sym.MINUSM, yyline, yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 33:
            { return symbol(sym.FLOTANTE, yyline, yycolumn, yytext());
            }
          // fall through
          case 100: break;
          case 34:
            { return symbol(sym.LOWERE, yyline, yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 35:
            { return symbol(sym.EQEQ, yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 36:
            { return symbol(sym.GREATERE, yyline, yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 37:
            { return symbol(sym.IF, yyline, yycolumn, yytext());
            }
          // fall through
          case 104: break;
          case 38:
            { return symbol(sym.IN, yyline, yycolumn, yytext());
            }
          // fall through
          case 105: break;
          case 39:
            { return symbol(sym.DISJUNTION, yyline, yycolumn, yytext());
            }
          // fall through
          case 106: break;
          case 40:
            { string.append('\"');
            }
          // fall through
          case 107: break;
          case 41:
            { string.append('\n');
            }
          // fall through
          case 108: break;
          case 42:
            { string.append('\r');
            }
          // fall through
          case 109: break;
          case 43:
            { string.append('\t');
            }
          // fall through
          case 110: break;
          case 44:
            { string.append('\'');
            }
          // fall through
          case 111: break;
          case 45:
            { return symbol(sym.FOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 112: break;
          case 46:
            { return symbol(sym.INT, yyline, yycolumn, yytext());
            }
          // fall through
          case 113: break;
          case 47:
            { return symbol(sym.LOC, yyline, yycolumn, yytext());
            }
          // fall through
          case 114: break;
          case 48:
            { return symbol(sym.BOOOLEANF, yyline, yycolumn, yytext());
            }
          // fall through
          case 115: break;
          case 49:
            { return symbol(sym.CASE, yyline, yycolumn, yytext());
            }
          // fall through
          case 116: break;
          case 50:
            { return symbol(sym.CHAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 117: break;
          case 51:
            { return symbol(sym.ELSE, yyline, yycolumn, yytext());
            }
          // fall through
          case 118: break;
          case 52:
            { return symbol(sym.FUNC, yyline, yycolumn, yytext());
            }
          // fall through
          case 119: break;
          case 53:
            { return symbol(sym.GLOB, yyline, yycolumn, yytext());
            }
          // fall through
          case 120: break;
          case 54:
            { return symbol(sym.MAIN, yyline, yycolumn, yytext());
            }
          // fall through
          case 121: break;
          case 55:
            { return symbol(sym.READ, yyline, yycolumn, yytext());
            }
          // fall through
          case 122: break;
          case 56:
            { return symbol(sym.TRUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 123: break;
          case 57:
            { return symbol(sym.BREAK, yyline, yycolumn, yytext());
            }
          // fall through
          case 124: break;
          case 58:
            { return symbol(sym.FALSE, yyline, yycolumn, yytext());
            }
          // fall through
          case 125: break;
          case 59:
            { return symbol(sym.FLOAT, yyline, yycolumn, yytext());
            }
          // fall through
          case 126: break;
          case 60:
            { return symbol(sym.PARAM, yyline, yycolumn, yytext());
            }
          // fall through
          case 127: break;
          case 61:
            { return symbol(sym.PRINTF, yyline, yycolumn, yytext());
            }
          // fall through
          case 128: break;
          case 62:
            { return symbol(sym.RANGE, yyline, yycolumn, yytext());
            }
          // fall through
          case 129: break;
          case 63:
            { return symbol(sym.WHILE, yyline, yycolumn, yytext());
            }
          // fall through
          case 130: break;
          case 64:
            { return symbol(sym.RETURN, yyline, yycolumn, yytext());
            }
          // fall through
          case 131: break;
          case 65:
            { return symbol(sym.STRINGC, yyline, yycolumn, yytext());
            }
          // fall through
          case 132: break;
          case 66:
            { return symbol(sym.SWITCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 133: break;
          case 67:
            { return symbol(sym.DEFAULT, yyline, yycolumn, yytext());
            }
          // fall through
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
