
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package py01compiladores;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\066\002\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\004\004\000" +
    "\002\015\003\000\002\015\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\012\003\000\002" +
    "\012\003\000\002\014\003\000\002\014\003\000\002\005" +
    "\004\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\004\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\004\000\002\024\004" +
    "\000\002\024\003\000\002\024\003\000\002\046\005\000" +
    "\002\046\005\000\002\046\003\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\003\000\002\050\005\000\002\050\003\000\002\050\003" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\003\000\002\050\003\000\002\026\003\000\002" +
    "\026\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\006\000\002\013\006\000\002\013\003\000\002\027\003" +
    "\000\002\027\005\000\002\027\007\000\002\027\010\000" +
    "\002\027\005\000\002\027\007\000\002\027\010\000\002" +
    "\030\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\031\003\000\002\031\003\000\002\006\006\000" +
    "\002\032\010\000\002\032\012\000\002\032\013\000\002" +
    "\032\015\000\002\033\010\000\002\033\012\000\002\033" +
    "\013\000\002\033\017\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\011\003\000\002\007\007\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\054\006\000\002\035\005\000\002\035\005" +
    "\000\002\036\004\000\002\037\005\000\002\037\003\000" +
    "\002\040\003\000\002\045\010\000\002\041\006\000\002" +
    "\042\005\000\002\042\003\000\002\052\006\000\002\052" +
    "\007\000\002\052\007\000\002\052\007\000\002\056\007" +
    "\000\002\057\005\000\002\020\006\000\002\060\005\000" +
    "\002\021\006\000\002\021\002\000\002\061\003\000\002" +
    "\017\006\000\002\062\006\000\002\063\014\000\002\063" +
    "\016\000\002\063\020\000\002\016\006\000\002\043\006" +
    "\000\002\064\006\000\002\044\006\000\002\044\004\000" +
    "\002\044\005\000\002\044\004\000\002\044\003\000\002" +
    "\065\002\000\002\051\006\000\002\053\004\000\002\053" +
    "\006\000\002\055\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\010\003\000\053\000\057\000\001\002\000" +
    "\010\003\011\053\012\057\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\033\u0111\001" +
    "\002\000\012\002\ufffd\003\ufffd\053\ufffd\057\ufffd\001\002" +
    "\000\006\070\u0110\071\u010f\001\002\000\004\033\u0100\001" +
    "\002\000\004\070\020\001\002\000\012\002\uffff\003\011" +
    "\053\012\057\007\001\002\000\012\002\ufffb\003\ufffb\053" +
    "\ufffb\057\ufffb\001\002\000\012\002\ufffc\003\ufffc\053\ufffc" +
    "\057\ufffc\001\002\000\012\002\ufffe\003\ufffe\053\ufffe\057" +
    "\ufffe\001\002\000\054\006\032\014\102\015\103\016\023" +
    "\017\055\021\061\027\036\034\101\041\053\042\077\043" +
    "\043\045\072\046\031\051\063\053\012\054\067\055\051" +
    "\056\062\061\035\062\070\064\050\001\002\000\064\003" +
    "\ufff3\006\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3" +
    "\027\ufff3\034\ufff3\041\ufff3\042\ufff3\043\ufff3\045\ufff3\046" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\061\ufff3\062\ufff3\063\ufff3\064\ufff3\070\ufff3\001\002\000" +
    "\050\004\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\020\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\065\uffd4\067\uffd4\071\uffd4\073\uffd4" +
    "\001\002\000\050\004\uffd9\006\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\020\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\065\uffd9\067\uffd9\071" +
    "\uffd9\073\uffd9\001\002\000\064\003\uffee\006\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\021\uffee\027\uffee\034\uffee\041" +
    "\uffee\042\uffee\043\uffee\045\uffee\046\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\055\uffee\056\uffee\061\uffee\062\uffee\063" +
    "\uffee\064\uffee\070\uffee\001\002\000\026\006\032\014\102" +
    "\015\114\016\023\017\055\027\036\034\101\041\053\042" +
    "\077\064\050\001\002\000\064\003\ufff1\006\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\021\ufff1\027\ufff1\034\ufff1\041" +
    "\ufff1\042\ufff1\043\ufff1\045\ufff1\046\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\070\ufff1\001\002\000\064\003\uffed\006\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\021\uffed\027\uffed\034" +
    "\uffed\041\uffed\042\uffed\043\uffed\045\uffed\046\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\061\uffed\062" +
    "\uffed\063\uffed\064\uffed\070\uffed\001\002\000\012\065\uffbb" +
    "\067\uffbb\071\uffbb\073\uffbb\001\002\000\004\033\353\001" +
    "\002\000\010\014\102\034\101\064\350\001\002\000\064" +
    "\003\ufff0\006\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021" +
    "\ufff0\027\ufff0\034\ufff0\041\ufff0\042\ufff0\043\ufff0\045\ufff0" +
    "\046\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\070\ufff0\001\002" +
    "\000\064\003\ufff4\006\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\021\ufff4\027\ufff4\034\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\045\ufff4\046\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\070\ufff4" +
    "\001\002\000\004\033\343\001\002\000\004\064\332\001" +
    "\002\000\012\065\uffc1\067\uffc1\071\uffc1\073\uffc1\001\002" +
    "\000\016\031\uffbc\032\uffbc\065\uffbc\067\uffbc\071\uffbc\073" +
    "\uffbc\001\002\000\032\004\136\006\137\020\277\023\300" +
    "\024\303\025\304\026\302\030\301\065\uffb4\067\uffb4\071" +
    "\uffb4\073\uffb4\001\002\000\064\003\ufff5\006\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\021\ufff5\027\ufff5\034\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\070\ufff5\001\002\000\004\064\327\001\002" +
    "\000\050\004\uffdd\006\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\065\uffdd\067\uffdd\071\uffdd\073" +
    "\uffdd\001\002\000\064\003\uffef\006\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\021\uffef\027\uffef\034\uffef\041\uffef\042" +
    "\uffef\043\uffef\045\uffef\046\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\070\uffef\001\002\000\050\004\uffda\006\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\020\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\030\uffda\031\uffda\032\uffda\033\uffda\065\uffda" +
    "\067\uffda\071\uffda\073\uffda\001\002\000\004\070\315\001" +
    "\002\000\026\006\032\014\102\015\265\016\023\017\055" +
    "\027\264\034\101\041\053\042\077\064\267\001\002\000" +
    "\006\033\260\071\261\001\002\000\064\003\ufff6\006\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\027\ufff6\034" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\045\ufff6\046\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\070\ufff6\001\002\000\016\031\uffe7" +
    "\032\uffe7\065\uffe7\067\uffe7\071\uffe7\073\uffe7\001\002\000" +
    "\064\003\ufff2\006\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\021\ufff2\027\ufff2\034\ufff2\041\ufff2\042\ufff2\043\ufff2\045" +
    "\ufff2\046\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\070\ufff2\001" +
    "\002\000\050\004\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\020\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\065\uffd8\067\uffd8\071\uffd8" +
    "\073\uffd8\001\002\000\004\070\255\001\002\000\056\006" +
    "\032\014\102\015\103\016\023\017\055\021\061\027\036" +
    "\034\101\041\053\042\077\043\043\045\072\046\031\051" +
    "\063\053\012\054\067\055\051\056\062\061\035\062\070" +
    "\064\050\070\254\001\002\000\004\071\253\001\002\000" +
    "\004\071\252\001\002\000\004\064\236\001\002\000\004" +
    "\064\233\001\002\000\064\003\uffec\006\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\021\uffec\027\uffec\034\uffec\041\uffec" +
    "\042\uffec\043\uffec\045\uffec\046\uffec\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\061\uffec\062\uffec\063\uffec" +
    "\064\uffec\070\uffec\001\002\000\064\003\uffea\006\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\021\uffea\027\uffea\034\uffea" +
    "\041\uffea\042\uffea\043\uffea\045\uffea\046\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\061\uffea\062\uffea" +
    "\063\uffea\064\uffea\070\uffea\001\002\000\050\004\uffd3\006" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\020\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\065\uffd3\067\uffd3\071\uffd3\073\uffd3\001\002\000\004" +
    "\033\202\001\002\000\004\064\176\001\002\000\064\003" +
    "\ufff8\006\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8" +
    "\027\ufff8\034\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\046" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\064\ufff8\070\ufff8\001\002\000" +
    "\004\064\173\001\002\000\004\070\170\001\002\000\004" +
    "\070\150\001\002\000\016\031\104\032\106\065\uffc2\067" +
    "\uffc2\071\uffc2\073\uffc2\001\002\000\064\003\uffeb\006\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\027\uffeb\034" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\045\uffeb\046\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\064\uffeb\070\uffeb\001\002\000\016\031\uffe6" +
    "\032\uffe6\065\uffe6\067\uffe6\071\uffe6\073\uffe6\001\002\000" +
    "\050\004\uffe2\006\uffe2\010\126\011\125\012\124\013\127" +
    "\020\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\065\uffe2\067\uffe2\071\uffe2\073\uffe2" +
    "\001\002\000\050\004\uffe8\006\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\020\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\065\uffe8\067\uffe8\071" +
    "\uffe8\073\uffe8\001\002\000\050\004\uffe9\006\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\020\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\065\uffe9" +
    "\067\uffe9\071\uffe9\073\uffe9\001\002\000\052\004\uffd7\005" +
    "\112\006\uffd7\007\113\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\020\uffd7\022\105\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030" +
    "\uffd7\031\104\032\106\064\107\066\110\071\uffd7\001\002" +
    "\000\026\006\uffac\014\uffac\015\uffac\016\uffac\017\uffac\027" +
    "\uffac\034\uffac\041\uffac\042\uffac\064\uffac\001\002\000\026" +
    "\006\032\014\102\015\114\016\023\017\055\027\036\034" +
    "\101\041\053\042\077\064\050\001\002\000\026\006\uffad" +
    "\014\uffad\015\uffad\016\uffad\017\uffad\027\uffad\034\uffad\041" +
    "\uffad\042\uffad\064\uffad\001\002\000\030\006\uff93\014\uff93" +
    "\015\uff93\016\uff93\017\uff93\027\uff93\034\uff93\041\uff93\042" +
    "\uff93\064\uff93\065\120\001\002\000\004\014\116\001\002" +
    "\000\026\006\032\014\102\015\114\016\023\017\055\027" +
    "\036\034\101\041\053\042\077\064\050\001\002\000\050" +
    "\004\uffd5\006\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\020" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\065\uffd5\067\uffd5\071\uffd5\073\uffd5\001" +
    "\002\000\050\004\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\020\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\065\uffd6\067\uffd6\071\uffd6" +
    "\073\uffd6\001\002\000\056\004\uffd7\005\112\006\uffd7\007" +
    "\113\010\uffd7\011\uffd7\012\uffd7\013\uffd7\020\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\104\032\106\064" +
    "\107\065\uffd7\066\110\067\uffd7\071\uffd7\073\uffd7\001\002" +
    "\000\012\065\uffb7\067\uffb7\071\uffb7\073\uffb7\001\002\000" +
    "\004\067\117\001\002\000\050\004\uff8e\006\uff8e\010\uff8e" +
    "\011\uff8e\012\uff8e\013\uff8e\020\uff8e\023\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\065\uff8e" +
    "\067\uff8e\071\uff8e\073\uff8e\001\002\000\050\004\uff95\006" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\020\uff95\023\uff95" +
    "\024\uff95\025\uff95\026\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\065\uff95\067\uff95\071\uff95\073\uff95\001\002\000\004" +
    "\071\123\001\002\000\012\065\uff9d\067\uff9d\071\uff9d\073" +
    "\uff9d\001\002\000\064\003\uffab\006\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\021\uffab\027\uffab\034\uffab\041\uffab\042" +
    "\uffab\043\uffab\045\uffab\046\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\055\uffab\056\uffab\061\uffab\062\uffab\063\uffab\064" +
    "\uffab\070\uffab\001\002\000\020\006\130\014\102\015\132" +
    "\016\023\017\055\034\101\064\133\001\002\000\020\006" +
    "\130\014\102\015\132\016\023\017\055\034\101\064\133" +
    "\001\002\000\020\006\130\014\102\015\132\016\023\017" +
    "\055\034\101\064\133\001\002\000\020\006\130\014\102" +
    "\015\132\016\023\017\055\034\101\064\133\001\002\000" +
    "\006\014\102\034\101\001\002\000\050\004\uffe1\006\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\020\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\065\uffe1\067\uffe1\071\uffe1\073\uffe1\001\002\000\060\004" +
    "\uffd7\005\112\006\uffd7\007\113\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\064\107\065\uffd7\066\110" +
    "\067\uffd7\071\uffd7\073\uffd7\001\002\000\020\006\130\014" +
    "\102\015\132\016\023\017\055\034\101\064\133\001\002" +
    "\000\010\004\136\006\137\065\135\001\002\000\050\004" +
    "\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\020\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\065\uffdc\067\uffdc\071\uffdc\073\uffdc\001\002" +
    "\000\020\006\130\014\102\015\132\016\023\017\055\034" +
    "\101\064\133\001\002\000\020\006\130\014\102\015\132" +
    "\016\023\017\055\034\101\064\133\001\002\000\050\004" +
    "\uffe3\006\uffe3\010\126\011\125\012\124\013\127\020\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\065\uffe3\067\uffe3\071\uffe3\073\uffe3\001\002" +
    "\000\050\004\uffe4\006\uffe4\010\126\011\125\012\124\013" +
    "\127\020\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\065\uffe4\067\uffe4\071\uffe4\073" +
    "\uffe4\001\002\000\050\004\uffdb\006\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\020\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\065\uffdb\067\uffdb" +
    "\071\uffdb\073\uffdb\001\002\000\050\004\uffe0\006\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\020\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\065" +
    "\uffe0\067\uffe0\071\uffe0\073\uffe0\001\002\000\050\004\uffdf" +
    "\006\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\020\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\065\uffdf\067\uffdf\071\uffdf\073\uffdf\001\002\000" +
    "\050\004\uffde\006\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\020\uffde\023\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\065\uffde\067\uffde\071\uffde\073\uffde" +
    "\001\002\000\026\006\032\014\102\015\114\016\023\017" +
    "\055\027\036\034\101\041\053\042\077\064\050\001\002" +
    "\000\012\065\uffba\067\uffba\071\uffba\073\uffba\001\002\000" +
    "\010\003\152\052\155\063\151\001\002\000\004\033\166" +
    "\001\002\000\004\070\uff74\001\002\000\004\070\165\001" +
    "\002\000\054\006\032\014\102\015\103\016\023\017\055" +
    "\021\061\027\036\034\101\041\053\042\077\043\043\045" +
    "\072\046\031\051\063\053\012\054\067\055\051\056\062" +
    "\061\035\062\070\064\050\001\002\000\004\033\156\001" +
    "\002\000\020\006\130\014\102\015\132\016\023\017\055" +
    "\034\101\064\133\001\002\000\010\004\136\006\137\033" +
    "\160\001\002\000\054\006\uff72\014\uff72\015\uff72\016\uff72" +
    "\017\uff72\021\uff72\027\uff72\034\uff72\041\uff72\042\uff72\043" +
    "\uff72\045\uff72\046\uff72\051\uff72\053\uff72\054\uff72\055\uff72" +
    "\056\uff72\061\uff72\062\uff72\064\uff72\001\002\000\064\003" +
    "\uff73\006\032\014\102\015\103\016\023\017\055\021\061" +
    "\027\036\034\101\041\053\042\077\043\043\045\072\046" +
    "\031\051\063\052\uff73\053\012\054\067\055\051\056\062" +
    "\061\035\062\070\063\uff73\064\050\070\uff77\001\002\000" +
    "\010\003\152\052\155\063\151\001\002\000\064\003\ufff7" +
    "\006\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\027" +
    "\ufff7\034\ufff7\041\ufff7\042\ufff7\043\ufff7\045\ufff7\046\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\070\ufff7\001\002\000\004" +
    "\070\uff78\001\002\000\064\003\uff7a\006\uff7a\014\uff7a\015" +
    "\uff7a\016\uff7a\017\uff7a\021\uff7a\027\uff7a\034\uff7a\041\uff7a" +
    "\042\uff7a\043\uff7a\045\uff7a\046\uff7a\051\uff7a\052\uff7a\053" +
    "\uff7a\054\uff7a\055\uff7a\056\uff7a\061\uff7a\062\uff7a\063\uff7a" +
    "\064\uff7a\070\uff7a\001\002\000\056\006\032\014\102\015" +
    "\103\016\023\017\055\021\061\027\036\034\101\041\053" +
    "\042\077\043\043\045\072\046\031\051\063\053\012\054" +
    "\067\055\051\056\062\061\035\062\070\064\050\070\uff75" +
    "\001\002\000\056\006\032\014\102\015\103\016\023\017" +
    "\055\021\061\027\036\034\101\041\053\042\077\043\043" +
    "\045\072\046\031\051\063\053\012\054\067\055\051\056" +
    "\062\061\035\062\070\064\050\070\uff76\001\002\000\054" +
    "\006\032\014\102\015\103\016\023\017\055\021\061\027" +
    "\036\034\101\041\053\042\077\043\043\045\072\046\031" +
    "\051\063\053\012\054\067\055\051\056\062\061\035\062" +
    "\070\064\050\001\002\000\056\006\032\014\102\015\103" +
    "\016\023\017\055\021\061\027\036\034\101\041\053\042" +
    "\077\043\043\045\072\046\031\051\063\053\012\054\067" +
    "\055\051\056\062\061\035\062\070\064\050\070\172\001" +
    "\002\000\064\003\uff80\006\uff80\014\uff80\015\uff80\016\uff80" +
    "\017\uff80\021\uff80\027\uff80\034\uff80\041\uff80\042\uff80\043" +
    "\uff80\045\uff80\046\uff80\051\uff80\052\uff80\053\uff80\054\uff80" +
    "\055\uff80\056\uff80\061\uff80\062\uff80\063\uff80\064\uff80\070" +
    "\uff80\001\002\000\026\006\032\014\102\015\114\016\023" +
    "\017\055\027\036\034\101\041\053\042\077\064\050\001" +
    "\002\000\004\065\175\001\002\000\004\070\uff7f\001\002" +
    "\000\004\015\177\001\002\000\004\065\200\001\002\000" +
    "\004\071\201\001\002\000\064\003\uff87\006\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\021\uff87\027\uff87\034\uff87\041" +
    "\uff87\042\uff87\043\uff87\045\uff87\046\uff87\051\uff87\052\uff87" +
    "\053\uff87\054\uff87\055\uff87\056\uff87\061\uff87\062\uff87\063" +
    "\uff87\064\uff87\070\uff87\001\002\000\014\035\210\036\207" +
    "\037\206\040\203\072\204\001\002\000\004\033\uffa0\001" +
    "\002\000\004\033\uff9e\001\002\000\004\033\211\001\002" +
    "\000\004\033\uffa2\001\002\000\004\033\uffa1\001\002\000" +
    "\004\033\uff9f\001\002\000\004\015\212\001\002\000\010" +
    "\022\213\066\215\071\214\001\002\000\026\006\032\014" +
    "\102\015\114\016\023\017\055\027\036\034\101\041\053" +
    "\042\077\064\050\001\002\000\064\003\uffa6\006\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6\027\uffa6\034\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\045\uffa6\046\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\070\uffa6\001\002\000\004\014\216\001" +
    "\002\000\004\067\217\001\002\000\006\022\220\071\221" +
    "\001\002\000\004\066\222\001\002\000\064\003\uffa4\006" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4\027\uffa4" +
    "\034\uffa4\041\uffa4\042\uffa4\043\uffa4\045\uffa4\046\uffa4\051" +
    "\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\070\uffa4\001\002\000\026\006" +
    "\032\014\102\015\114\016\023\017\055\027\036\034\101" +
    "\041\053\042\077\064\050\001\002\000\010\067\uff8c\071" +
    "\uff8c\073\227\001\002\000\004\067\225\001\002\000\004" +
    "\071\226\001\002\000\064\003\uffa3\006\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\021\uffa3\027\uffa3\034\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\045\uffa3\046\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\061\uffa3\062\uffa3\063\uffa3" +
    "\064\uffa3\070\uffa3\001\002\000\026\006\032\014\102\015" +
    "\114\016\023\017\055\027\036\034\101\041\053\042\077" +
    "\064\050\001\002\000\006\067\uff8d\071\uff8d\001\002\000" +
    "\004\071\232\001\002\000\064\003\uffa5\006\uffa5\014\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\021\uffa5\027\uffa5\034\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\045\uffa5\046\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\056\uffa5\061\uffa5\062\uffa5\063" +
    "\uffa5\064\uffa5\070\uffa5\001\002\000\020\006\130\014\102" +
    "\015\132\016\023\017\055\034\101\064\133\001\002\000" +
    "\010\004\136\006\137\065\235\001\002\000\004\070\uff79" +
    "\001\002\000\012\015\241\016\242\017\240\065\237\001" +
    "\002\000\004\071\251\001\002\000\004\065\247\001\002" +
    "\000\004\065\245\001\002\000\004\065\243\001\002\000" +
    "\004\071\244\001\002\000\064\003\uff8a\006\uff8a\014\uff8a" +
    "\015\uff8a\016\uff8a\017\uff8a\021\uff8a\027\uff8a\034\uff8a\041" +
    "\uff8a\042\uff8a\043\uff8a\045\uff8a\046\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\061\uff8a\062\uff8a\063" +
    "\uff8a\064\uff8a\070\uff8a\001\002\000\004\071\246\001\002" +
    "\000\064\003\uff88\006\uff88\014\uff88\015\uff88\016\uff88\017" +
    "\uff88\021\uff88\027\uff88\034\uff88\041\uff88\042\uff88\043\uff88" +
    "\045\uff88\046\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055" +
    "\uff88\056\uff88\061\uff88\062\uff88\063\uff88\064\uff88\070\uff88" +
    "\001\002\000\004\071\250\001\002\000\064\003\uff89\006" +
    "\uff89\014\uff89\015\uff89\016\uff89\017\uff89\021\uff89\027\uff89" +
    "\034\uff89\041\uff89\042\uff89\043\uff89\045\uff89\046\uff89\051" +
    "\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\061\uff89" +
    "\062\uff89\063\uff89\064\uff89\070\uff89\001\002\000\064\003" +
    "\uff8b\006\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\021\uff8b" +
    "\027\uff8b\034\uff8b\041\uff8b\042\uff8b\043\uff8b\045\uff8b\046" +
    "\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\061\uff8b\062\uff8b\063\uff8b\064\uff8b\070\uff8b\001\002\000" +
    "\064\003\uff6f\006\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f" +
    "\021\uff6f\027\uff6f\034\uff6f\041\uff6f\042\uff6f\043\uff6f\045" +
    "\uff6f\046\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f" +
    "\056\uff6f\061\uff6f\062\uff6f\063\uff6f\064\uff6f\070\uff6f\001" +
    "\002\000\064\003\uffe5\006\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\021\uffe5\027\uffe5\034\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\045\uffe5\046\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\070" +
    "\uffe5\001\002\000\012\002\uff96\003\uff96\053\uff96\057\uff96" +
    "\001\002\000\054\006\032\014\102\015\103\016\023\017" +
    "\055\021\061\027\036\034\101\041\053\042\077\043\043" +
    "\045\072\046\031\051\063\053\012\054\067\055\051\056" +
    "\062\061\035\062\070\064\050\001\002\000\056\006\032" +
    "\014\102\015\103\016\023\017\055\021\061\027\036\034" +
    "\101\041\053\042\077\043\043\045\072\046\031\051\063" +
    "\053\012\054\067\055\051\056\062\061\035\062\070\064" +
    "\050\070\257\001\002\000\064\003\uff7b\006\uff7b\014\uff7b" +
    "\015\uff7b\016\uff7b\017\uff7b\021\uff7b\027\uff7b\034\uff7b\041" +
    "\uff7b\042\uff7b\043\uff7b\045\uff7b\046\uff7b\051\uff7b\052\uff7b" +
    "\053\uff7b\054\uff7b\055\uff7b\056\uff7b\061\uff7b\062\uff7b\063" +
    "\uff7b\064\uff7b\070\uff7b\001\002\000\026\006\032\014\102" +
    "\015\114\016\023\017\055\027\036\034\101\041\053\042" +
    "\077\064\050\001\002\000\064\003\uff71\006\uff71\014\uff71" +
    "\015\uff71\016\uff71\017\uff71\021\uff71\027\uff71\034\uff71\041" +
    "\uff71\042\uff71\043\uff71\045\uff71\046\uff71\051\uff71\052\uff71" +
    "\053\uff71\054\uff71\055\uff71\056\uff71\061\uff71\062\uff71\063" +
    "\uff71\064\uff71\070\uff71\001\002\000\004\071\263\001\002" +
    "\000\064\003\uff70\006\uff70\014\uff70\015\uff70\016\uff70\017" +
    "\uff70\021\uff70\027\uff70\034\uff70\041\uff70\042\uff70\043\uff70" +
    "\045\uff70\046\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055" +
    "\uff70\056\uff70\061\uff70\062\uff70\063\uff70\064\uff70\070\uff70" +
    "\001\002\000\004\064\311\001\002\000\050\004\uffd7\005" +
    "\112\006\uffd7\007\113\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031" +
    "\104\032\106\064\107\065\uffd7\066\110\001\002\000\024" +
    "\004\136\006\137\020\277\023\300\024\303\025\304\026" +
    "\302\030\301\065\135\001\002\000\026\006\032\014\102" +
    "\015\132\016\023\017\055\027\264\034\101\041\053\042" +
    "\077\064\267\001\002\000\010\031\104\032\106\065\271" +
    "\001\002\000\016\031\uffbf\032\uffbf\065\uffbf\067\uffbf\071" +
    "\uffbf\073\uffbf\001\002\000\026\006\032\014\102\015\114" +
    "\016\023\017\055\027\036\034\101\041\053\042\077\064" +
    "\050\001\002\000\004\065\274\001\002\000\012\065\uffb9" +
    "\067\uffb9\071\uffb9\073\uffb9\001\002\000\004\065\271\001" +
    "\002\000\020\006\130\014\102\015\132\016\023\017\055" +
    "\034\101\064\133\001\002\000\020\006\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\034\uffaf\064\uffaf\001\002\000\020" +
    "\006\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\034\uffb3\064" +
    "\uffb3\001\002\000\020\006\uffae\014\uffae\015\uffae\016\uffae" +
    "\017\uffae\034\uffae\064\uffae\001\002\000\020\006\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\034\uffb0\064\uffb0\001\002" +
    "\000\020\006\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\034" +
    "\uffb1\064\uffb1\001\002\000\020\006\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\034\uffb2\064\uffb2\001\002\000\022\004" +
    "\136\006\137\031\uffc0\032\uffc0\065\uffc0\067\uffc0\071\uffc0" +
    "\073\uffc0\001\002\000\026\006\032\014\102\015\114\016" +
    "\023\017\055\027\036\034\101\041\053\042\077\064\050" +
    "\001\002\000\004\065\310\001\002\000\012\065\uffb6\067" +
    "\uffb6\071\uffb6\073\uffb6\001\002\000\026\006\032\014\102" +
    "\015\132\016\023\017\055\027\264\034\101\041\053\042" +
    "\077\064\267\001\002\000\022\004\136\006\137\020\277" +
    "\023\300\024\303\025\304\026\302\030\301\001\002\000" +
    "\004\065\314\001\002\000\016\031\uffbe\032\uffbe\065\uffbe" +
    "\067\uffbe\071\uffbe\073\uffbe\001\002\000\054\006\032\014" +
    "\102\015\103\016\023\017\055\021\061\027\036\034\101" +
    "\041\053\042\077\043\043\045\072\046\031\051\063\053" +
    "\012\054\067\055\051\056\062\061\035\062\070\064\050" +
    "\001\002\000\066\003\uff82\006\uff82\014\uff82\015\uff82\016" +
    "\uff82\017\uff82\021\uff82\027\uff82\034\uff82\041\uff82\042\uff82" +
    "\043\uff82\044\317\045\uff82\046\uff82\051\uff82\052\uff82\053" +
    "\uff82\054\uff82\055\uff82\056\uff82\061\uff82\062\uff82\063\uff82" +
    "\064\uff82\070\uff82\001\002\000\004\070\uff81\001\002\000" +
    "\064\003\uff86\006\uff86\014\uff86\015\uff86\016\uff86\017\uff86" +
    "\021\uff86\027\uff86\034\uff86\041\uff86\042\uff86\043\uff86\045" +
    "\uff86\046\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86" +
    "\056\uff86\061\uff86\062\uff86\063\uff86\064\uff86\070\uff86\001" +
    "\002\000\004\070\322\001\002\000\054\006\032\014\102" +
    "\015\103\016\023\017\055\021\061\027\036\034\101\041" +
    "\053\042\077\043\043\045\072\046\031\051\063\053\012" +
    "\054\067\055\051\056\062\061\035\062\070\064\050\001" +
    "\002\000\056\006\032\014\102\015\103\016\023\017\055" +
    "\021\061\027\036\034\101\041\053\042\077\043\043\045" +
    "\072\046\031\051\063\053\012\054\067\055\051\056\062" +
    "\061\035\062\070\064\050\070\324\001\002\000\064\003" +
    "\uff83\006\uff83\014\uff83\015\uff83\016\uff83\017\uff83\021\uff83" +
    "\027\uff83\034\uff83\041\uff83\042\uff83\043\uff83\045\uff83\046" +
    "\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83" +
    "\061\uff83\062\uff83\063\uff83\064\uff83\070\uff83\001\002\000" +
    "\056\006\032\014\102\015\103\016\023\017\055\021\061" +
    "\027\036\034\101\041\053\042\077\043\043\045\072\046" +
    "\031\051\063\053\012\054\067\055\051\056\062\061\035" +
    "\062\070\064\050\070\326\001\002\000\066\003\uff84\006" +
    "\uff84\014\uff84\015\uff84\016\uff84\017\uff84\021\uff84\027\uff84" +
    "\034\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046" +
    "\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84" +
    "\061\uff84\062\uff84\063\uff84\064\uff84\070\uff84\001\002\000" +
    "\026\006\032\014\102\015\114\016\023\017\055\027\036" +
    "\034\101\041\053\042\077\064\050\001\002\000\004\065" +
    "\331\001\002\000\004\070\uff85\001\002\000\026\006\032" +
    "\014\102\015\333\016\023\017\055\027\264\034\101\041" +
    "\053\042\077\064\267\001\002\000\046\004\uffd7\005\112" +
    "\006\uffd7\007\113\010\uffd7\011\uffd7\012\uffd7\013\uffd7\020" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\104" +
    "\032\106\064\107\066\110\001\002\000\010\031\104\032" +
    "\106\065\314\001\002\000\026\006\032\014\102\015\114" +
    "\016\023\017\055\027\036\034\101\041\053\042\077\064" +
    "\050\001\002\000\004\065\337\001\002\000\012\065\uffb8" +
    "\067\uffb8\071\uffb8\073\uffb8\001\002\000\026\006\032\014" +
    "\102\015\114\016\023\017\055\027\036\034\101\041\053" +
    "\042\077\064\050\001\002\000\004\065\342\001\002\000" +
    "\012\065\uffb5\067\uffb5\071\uffb5\073\uffb5\001\002\000\014" +
    "\035\210\036\207\037\206\040\203\072\204\001\002\000" +
    "\004\033\345\001\002\000\004\015\346\001\002\000\004" +
    "\071\347\001\002\000\064\003\uff8f\006\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\021\uff8f\027\uff8f\034\uff8f\041\uff8f" +
    "\042\uff8f\043\uff8f\045\uff8f\046\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\061\uff8f\062\uff8f\063\uff8f" +
    "\064\uff8f\070\uff8f\001\002\000\026\006\032\014\102\015" +
    "\114\016\023\017\055\027\036\034\101\041\053\042\077" +
    "\064\050\001\002\000\004\065\352\001\002\000\016\031" +
    "\uffbd\032\uffbd\065\uffbd\067\uffbd\071\uffbd\073\uffbd\001\002" +
    "\000\004\015\354\001\002\000\004\033\355\001\002\000" +
    "\004\047\356\001\002\000\004\033\357\001\002\000\004" +
    "\050\360\001\002\000\004\064\361\001\002\000\020\006" +
    "\130\014\102\015\132\016\023\017\055\034\101\064\133" +
    "\001\002\000\012\004\136\006\137\065\364\073\363\001" +
    "\002\000\020\006\130\014\102\015\132\016\023\017\055" +
    "\034\101\064\133\001\002\000\004\070\uff7e\001\002\000" +
    "\012\004\136\006\137\065\367\073\366\001\002\000\020" +
    "\006\130\014\102\015\132\016\023\017\055\034\101\064" +
    "\133\001\002\000\004\070\uff7d\001\002\000\010\004\136" +
    "\006\137\065\371\001\002\000\004\070\uff7c\001\002\000" +
    "\006\065\uff90\073\uff90\001\002\000\004\065\377\001\002" +
    "\000\006\065\uff91\073\375\001\002\000\026\006\032\014" +
    "\102\015\114\016\023\017\055\027\036\034\101\041\053" +
    "\042\077\064\050\001\002\000\004\065\uff92\001\002\000" +
    "\050\004\uff94\006\uff94\010\uff94\011\uff94\012\uff94\013\uff94" +
    "\020\uff94\023\uff94\024\uff94\025\uff94\026\uff94\030\uff94\031" +
    "\uff94\032\uff94\033\uff94\065\uff94\067\uff94\071\uff94\073\uff94" +
    "\001\002\000\014\035\210\036\207\037\206\040\203\072" +
    "\204\001\002\000\004\033\u0102\001\002\000\004\015\u0103" +
    "\001\002\000\010\022\u0104\066\u0106\071\u0105\001\002\000" +
    "\026\006\032\014\102\015\114\016\023\017\055\027\036" +
    "\034\101\041\053\042\077\064\050\001\002\000\070\002" +
    "\uffaa\003\uffaa\006\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\021\uffaa\027\uffaa\034\uffaa\041\uffaa\042\uffaa\043\uffaa\045" +
    "\uffaa\046\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\070" +
    "\uffaa\001\002\000\004\014\u0107\001\002\000\004\067\u0108" +
    "\001\002\000\006\022\u0109\071\u010a\001\002\000\026\006" +
    "\032\014\102\015\114\016\023\017\055\027\036\034\101" +
    "\041\053\042\077\064\050\001\002\000\070\002\uffa8\003" +
    "\uffa8\006\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\021\uffa8" +
    "\027\uffa8\034\uffa8\041\uffa8\042\uffa8\043\uffa8\045\uffa8\046" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\070\uffa8\001" +
    "\002\000\004\071\u010c\001\002\000\070\002\uffa7\003\uffa7" +
    "\006\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7\027" +
    "\uffa7\034\uffa7\041\uffa7\042\uffa7\043\uffa7\045\uffa7\046\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\070\uffa7\001\002" +
    "\000\004\071\u010e\001\002\000\070\002\uffa9\003\uffa9\006" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\027\uffa9" +
    "\034\uffa9\041\uffa9\042\uffa9\043\uffa9\045\uffa9\046\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\064\uffa9\070\uffa9\001\002\000" +
    "\012\002\ufffa\003\ufffa\053\ufffa\057\ufffa\001\002\000\012" +
    "\002\ufff9\003\ufff9\053\ufff9\057\ufff9\001\002\000\014\035" +
    "\u0116\036\u0115\037\u0114\040\u0112\072\u0113\001\002\000\004" +
    "\033\u0120\001\002\000\004\033\u011e\001\002\000\004\033" +
    "\u011c\001\002\000\004\033\u011a\001\002\000\004\033\u0117" +
    "\001\002\000\006\015\u0119\060\u0118\001\002\000\004\070" +
    "\uff9c\001\002\000\004\070\uff9b\001\002\000\004\015\u011b" +
    "\001\002\000\004\070\uff9a\001\002\000\004\015\u011d\001" +
    "\002\000\004\070\uff98\001\002\000\004\015\u011f\001\002" +
    "\000\004\070\uff99\001\002\000\004\015\u0121\001\002\000" +
    "\004\070\uff97\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\006\002\004\066\003\001\001\000\014\003" +
    "\013\004\007\007\012\032\014\054\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\016\007\012\032\014\054\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\005\044\006\051\010\040\012\045\013\074\014\037\015" +
    "\056\016\020\017\053\020\046\022\070\023\077\024\043" +
    "\026\057\027\036\030\027\032\033\033\041\035\021\036" +
    "\024\041\065\043\025\045\023\052\026\053\063\055\075" +
    "\056\064\057\032\062\072\063\055\064\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\010\040\011\371\012\045\013\074\014" +
    "\037\023\077\024\043\026\121\027\036\030\027\035\021" +
    "\036\024\037\372\040\373\041\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\315\001\001\000\024\010" +
    "\265\012\045\013\267\014\037\023\077\024\043\035\021" +
    "\036\024\041\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\005\044\006\051\010\040\012" +
    "\045\013\074\014\037\016\020\017\053\020\046\022\162" +
    "\023\077\024\043\026\057\027\036\030\027\032\033\033" +
    "\041\035\021\036\024\041\065\043\025\045\023\052\026" +
    "\053\063\055\075\056\064\057\032\062\072\063\055\064" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\110\001\001\000\002\001\001" +
    "\000\034\010\040\011\120\012\045\013\074\014\037\023" +
    "\077\024\043\026\121\027\036\030\027\035\021\036\024" +
    "\041\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\040\012\045\013\074\014\037" +
    "\023\077\024\043\026\114\027\036\030\027\035\021\036" +
    "\024\041\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\045\024" +
    "\144\035\021\036\024\041\065\001\001\000\014\012\045" +
    "\024\143\035\021\036\024\041\065\001\001\000\014\012" +
    "\045\024\142\035\021\036\024\041\065\001\001\000\014" +
    "\012\045\024\130\035\021\036\024\041\065\001\001\000" +
    "\004\012\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\133\012\045\023\077\024\043\035\021\036" +
    "\024\041\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\045\023\140\024\043\035\021\036\024\041" +
    "\065\001\001\000\016\012\045\023\137\024\043\035\021" +
    "\036\024\041\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\040\012\045\013\074\014" +
    "\037\023\077\024\043\026\146\027\036\030\027\035\021" +
    "\036\024\041\065\001\001\000\002\001\001\000\006\044" +
    "\152\051\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\005\044\006\051\010\040\012" +
    "\045\013\074\014\037\015\160\016\020\017\053\020\046" +
    "\022\070\023\077\024\043\026\057\027\036\030\027\032" +
    "\033\033\041\035\021\036\024\041\065\043\025\045\023" +
    "\052\026\053\063\055\075\056\064\057\032\062\072\063" +
    "\055\064\073\001\001\000\002\001\001\000\020\010\156" +
    "\012\045\023\077\024\043\035\021\036\024\041\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\005\044" +
    "\006\051\010\040\012\045\013\074\014\037\016\020\017" +
    "\053\020\046\022\162\023\077\024\043\026\057\027\036" +
    "\030\027\032\033\033\041\035\021\036\024\041\065\043" +
    "\025\045\023\052\026\053\063\055\075\056\064\057\032" +
    "\062\072\063\055\064\073\065\161\001\001\000\006\044" +
    "\163\051\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\005\044\006\051\010\040\012" +
    "\045\013\074\014\037\015\166\016\020\017\053\020\046" +
    "\022\070\023\077\024\043\026\057\027\036\030\027\032" +
    "\033\033\041\035\021\036\024\041\065\043\025\045\023" +
    "\052\026\053\063\055\075\056\064\057\032\062\072\063" +
    "\055\064\073\001\001\000\076\005\044\006\051\010\040" +
    "\012\045\013\074\014\037\016\020\017\053\020\046\022" +
    "\162\023\077\024\043\026\057\027\036\030\027\032\033" +
    "\033\041\035\021\036\024\041\065\043\025\045\023\052" +
    "\026\053\063\055\075\056\064\057\032\062\072\063\055" +
    "\064\073\001\001\000\100\005\044\006\051\010\040\012" +
    "\045\013\074\014\037\015\170\016\020\017\053\020\046" +
    "\022\070\023\077\024\043\026\057\027\036\030\027\032" +
    "\033\033\041\035\021\036\024\041\065\043\025\045\023" +
    "\052\026\053\063\055\075\056\064\057\032\062\072\063" +
    "\055\064\073\001\001\000\076\005\044\006\051\010\040" +
    "\012\045\013\074\014\037\016\020\017\053\020\046\022" +
    "\162\023\077\024\043\026\057\027\036\030\027\032\033" +
    "\033\041\035\021\036\024\041\065\043\025\045\023\052" +
    "\026\053\063\055\075\056\064\057\032\062\072\063\055" +
    "\064\073\001\001\000\002\001\001\000\032\010\040\012" +
    "\045\013\074\014\037\023\077\024\043\026\173\027\036" +
    "\030\027\035\021\036\024\041\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\010\040\011\230" +
    "\012\045\013\074\014\037\023\077\024\043\026\121\027" +
    "\036\030\027\035\021\036\024\041\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\010\040" +
    "\011\222\012\045\013\074\014\037\023\077\024\043\026" +
    "\121\027\036\030\027\035\021\036\024\041\065\042\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\010\040\011\222\012\045" +
    "\013\074\014\037\023\077\024\043\026\121\027\036\030" +
    "\027\035\021\036\024\041\065\042\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\233\012\045\023\077\024\043\035\021\036\024\041\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\005\044\006\051\010\040" +
    "\012\045\013\074\014\037\015\255\016\020\017\053\020" +
    "\046\022\070\023\077\024\043\026\057\027\036\030\027" +
    "\032\033\033\041\035\021\036\024\041\065\043\025\045" +
    "\023\052\026\053\063\055\075\056\064\057\032\062\072" +
    "\063\055\064\073\001\001\000\076\005\044\006\051\010" +
    "\040\012\045\013\074\014\037\016\020\017\053\020\046" +
    "\022\162\023\077\024\043\026\057\027\036\030\027\032" +
    "\033\033\041\035\021\036\024\041\065\043\025\045\023" +
    "\052\026\053\063\055\075\056\064\057\032\062\072\063" +
    "\055\064\073\001\001\000\002\001\001\000\034\010\040" +
    "\011\261\012\045\013\074\014\037\023\077\024\043\026" +
    "\121\027\036\030\027\035\021\036\024\041\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\305\001\001\000\004\025\275" +
    "\001\001\000\024\010\265\012\045\013\274\014\037\023" +
    "\077\024\043\035\021\036\024\041\065\001\001\000\004" +
    "\031\271\001\001\000\002\001\001\000\032\010\040\012" +
    "\045\013\074\014\037\023\077\024\043\026\272\027\036" +
    "\030\027\035\021\036\024\041\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\304" +
    "\012\045\023\077\024\043\035\021\036\024\041\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\040\012\045\013\074\014\037" +
    "\023\077\024\043\026\306\027\036\030\027\035\021\036" +
    "\024\041\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\311\012\045\013\312\014\037\023\077\024" +
    "\043\035\021\036\024\041\065\001\001\000\004\025\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\100\005" +
    "\044\006\051\010\040\012\045\013\074\014\037\015\324" +
    "\016\020\017\053\020\046\022\070\023\077\024\043\026" +
    "\057\027\036\030\027\032\033\033\041\035\021\036\024" +
    "\041\065\043\025\045\023\052\026\053\063\055\075\056" +
    "\064\057\032\062\072\063\055\064\073\001\001\000\006" +
    "\021\317\061\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\005\044\006\051\010\040" +
    "\012\045\013\074\014\037\015\322\016\020\017\053\020" +
    "\046\022\070\023\077\024\043\026\057\027\036\030\027" +
    "\032\033\033\041\035\021\036\024\041\065\043\025\045" +
    "\023\052\026\053\063\055\075\056\064\057\032\062\072" +
    "\063\055\064\073\001\001\000\076\005\044\006\051\010" +
    "\040\012\045\013\074\014\037\016\020\017\053\020\046" +
    "\022\162\023\077\024\043\026\057\027\036\030\027\032" +
    "\033\033\041\035\021\036\024\041\065\043\025\045\023" +
    "\052\026\053\063\055\075\056\064\057\032\062\072\063" +
    "\055\064\073\001\001\000\002\001\001\000\076\005\044" +
    "\006\051\010\040\012\045\013\074\014\037\016\020\017" +
    "\053\020\046\022\162\023\077\024\043\026\057\027\036" +
    "\030\027\032\033\033\041\035\021\036\024\041\065\043" +
    "\025\045\023\052\026\053\063\055\075\056\064\057\032" +
    "\062\072\063\055\064\073\001\001\000\002\001\001\000" +
    "\032\010\040\012\045\013\074\014\037\023\077\024\043" +
    "\026\327\027\036\030\027\035\021\036\024\041\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\311" +
    "\012\045\013\333\014\037\023\077\024\043\035\021\036" +
    "\024\041\065\001\001\000\004\031\337\001\001\000\004" +
    "\031\334\001\001\000\032\010\040\012\045\013\074\014" +
    "\037\023\077\024\043\026\335\027\036\030\027\035\021" +
    "\036\024\041\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\040\012\045\013\074\014\037\023\077" +
    "\024\043\026\340\027\036\030\027\035\021\036\024\041" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\010\040\012\045" +
    "\013\074\014\037\023\077\024\043\026\350\027\036\030" +
    "\027\035\021\036\024\041\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\361\012\045\023\077\024\043\035" +
    "\021\036\024\041\065\001\001\000\002\001\001\000\020" +
    "\010\364\012\045\023\077\024\043\035\021\036\024\041" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\367\012\045\023\077\024\043\035\021\036\024\041" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\010\040\011\371\012\045\013\074\014\037" +
    "\023\077\024\043\026\121\027\036\030\027\035\021\036" +
    "\024\037\375\040\373\041\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\010\040" +
    "\011\u010c\012\045\013\074\014\037\023\077\024\043\026" +
    "\121\027\036\030\027\035\021\036\024\041\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\010\040\011\222\012\045\013\074" +
    "\014\037\023\077\024\043\026\121\027\036\030\027\035" +
    "\021\036\024\041\065\042\u010a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
currentSymbol = lex.next_token();
            return currentSymbol; 
    }


    // Connect this parser to a scanner!
    Lexer lex;
    
    Symbol currentSymbol;
    HashMap<String, ArrayList<String>> TablaSimbolos = new HashMap<String, ArrayList<String>>();
    HashMap<String, Integer> cantidadParametros = new HashMap<>();
    int contar = 0;
    String currentHash;
    String globalHash = "globalTS";
    ArrayList<String> paramlist = new ArrayList<>();
    boolean flagMain = false;

    StringBuffer cod3D = new StringBuffer();
    int currentTemp = 1;
    int currentParam = 0;
    int currentIf = 1;
    int currentElse = 1;
    int currentWhile = 1;
    int currentFor = 1;
    int currentSwitch = 1;
    int currentCase = 1;
    int currentDefault = 1;
    boolean firstCase = true;

    int currentSwitchFlag = 1;
    String currentSwitchValue = "";

    String currentWhileCon = "";

    String currentStructure = "";
    boolean flagCreateBegin = true;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    public void syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 

    
    public void TablaSimbolosToString () throws Exception {
        String text = "";
        for (String key: TablaSimbolos.keySet()) {
            text +=  "Tabla de simbolo : " + key;
            text +=  " : valores: " ;
            for (String item : TablaSimbolos.get(key)) {
                text += item +  "\n"; 
            }
            text += "\n";
        }
        Path currentPath = Paths.get("");
        Path absolutePath = currentPath.toAbsolutePath();
        String currentDirectory = absolutePath.toString(); 
        String path4 = currentDirectory + "\\src\\py01compiladores\\tablaSimbolos.txt";
        //System.out.println(text);
        saveTablaSimbolos(text, path4);
    }

    public void Cod3DSave() throws Exception {
        Path currentPath = Paths.get("");
        Path absolutePath = currentPath.toAbsolutePath();
        String currentDirectory = absolutePath.toString(); 
        String path4 = currentDirectory + "\\src\\py01compiladores\\CodigoTresDimensiones.txt";
        //System.out.println(text);
        saveTablaSimbolos(cod3D.toString(), path4);
    }

    public boolean validarScopeVariables (String id) throws Exception {
        ArrayList<String> ScopeVariable = TablaSimbolos.get(currentHash);
        for (String elemento : ScopeVariable) {
            String[] partes = elemento.split(":");
            String idComp = partes[1].trim();
            if(id.equals(idComp) ){ return false;}

        }
        return true;
    }

    public boolean validarScopeVariablesGlobales (String id) throws Exception {
        ArrayList<String> ScopeVariableGlobales = TablaSimbolos.get(globalHash);
        for (String elemento : ScopeVariableGlobales) {
            String[] partes = elemento.split(":");
            String idComp = partes[1].trim();
            if(id.equals(idComp) ){ return false;}
        }
        return true;
    } 

    public String getTipo(String id) {
        //prioridad al scope local
        ArrayList<String> scope1 = TablaSimbolos.get(currentHash);
        if (scope1 == null){return "null";}
        for (String elemento1 : scope1) {
            String[] elementos = elemento1.split(":");
            if (elementos[1].trim().equals(id)) {
                return elementos[2];
            }
        }
        //scope global
        ArrayList<String> scope2 = TablaSimbolos.get(globalHash);
        if (scope2 != null){return "null";}
        for (String elemento2 : scope2) {
            String[] elementos = elemento2.split(":");
            if (elementos[1].trim().equals(id)) {
                return elementos[2];
            }
        }
        return "null";
    }

    public boolean validarNombreFuncion(String functionName) {
        for (String key : TablaSimbolos.keySet()) {
            if (key.equals(functionName)) {
                return false;
            }
        }
        return true;
    }
    
    public boolean validarOperacionIntFloat(String tipo1, String tipo2) {
        if(tipo1.equals(tipo2)) { return true;}
        else {return false;}
    }

    public boolean validarUsoVariable(String id) {
        //System.out.println(id);
        if (TablaSimbolos.containsKey(currentHash)) {
            for (String elemento : TablaSimbolos.get(currentHash)) {
                String[] partes = elemento.split(":");
                if (partes[1].trim().equals(id)) {
                    return true;
                }
            }
        }

        if (TablaSimbolos.containsKey(globalHash)) {
            for (String elemento : TablaSimbolos.get(globalHash)) {
                String[] partes = elemento.split(":");
                if (partes[1].trim().equals(id)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean validarFuncionExistente(String functionName) {
        return TablaSimbolos.containsKey(functionName);
    }
   
    public static void saveTablaSimbolos(String content, String ruta) throws IOException, Exception {
        try {
            FileWriter archivoEscritura = new FileWriter(ruta);
            BufferedWriter escritor = new BufferedWriter(archivoEscritura);
            escritor.write(content);
            escritor.close();
            System.out.println("Cadena guardada en el archivo correctamente.");
        } catch (IOException e) {
            System.err.println("Error al guardar la cadena en el archivo: " + e.getMessage());
        }
    }

    

    public int contarParametros (String id) throws Exception {
        ArrayList<String> scopeParams = TablaSimbolos.get(id);
        if (scopeParams == null) {return -1;}
        int count = 0;
        for (String elemento : scopeParams) {
            String[] partes = elemento.split(":");
            String idComp = partes[0].trim();
            if(idComp.equals("parametro") ){ count++;}
        }
        return count;
    }

    public void identParam (String id) throws Exception {
        ArrayList<String> scopeParams = TablaSimbolos.get(id);
        paramlist.clear();
        if (scopeParams == null) {

        }
        else{
            for (String elemento : scopeParams) {
                String[] partes = elemento.split(":");
                String idComp = partes[0].trim();
                if(idComp.equals("parametro") ){ paramlist.add(partes[2]);}
            }
        }
    }

    public boolean validarRetorno(String tipo) {
        // Verificar en el alcance local
        ArrayList<String> informacion = TablaSimbolos.get(currentHash);
        if (informacion == null) {return false;}
        // Iterar sobre la lista de información
        for (String info : informacion) {
            // Imprimir la información
            String[] partes = info.split(":");
            if(partes[0].trim().equals("tipo") ) {
                if(tipo.toLowerCase().equals( partes[2].trim().toLowerCase() )) {
                    //System.out.println("El tipó de retorno si es compatible.");
                    return true;
                } 
            }
            
        }
        return false;
    } 

    public String getTipoFunc(String id) {
        // Verificar en el alcance local
        ArrayList<String> informacion = TablaSimbolos.get(id);
        if (informacion == null) {return "null";}
        //System.out.println(id);
        // Iterar sobre la lista de información
        for (String info : informacion) {
            // Imprimir la información
            String[] partes = info.split(":");
            return partes[2].trim();
            //String = partes[0].trim()
        }
        return "null";
    } 

    public void toStringCod3D() {
        // Verificar si la función existe en la tabla de símbolos
        System.out.println(cod3D.toString());
    }

    public int contarParametrosInvocados(String params) {
        if (params.isEmpty()) {
            return 0;
        }
        return params.split(",").length;
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
 TablaSimbolos.put(globalHash, new ArrayList<String>()); cod3D.append("\n\nbegin_globals_:");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= NT$0 BODY 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TablaSimbolosToString(); Cod3DSave();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BODY ::= BODY STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY ::= STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= FUNC_STAT_DEF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= DECL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= error ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= error UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINE ::= LINER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINE ::= LINE LINER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINER ::= ASIG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINER ::= DECLOC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINER ::= DECL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINER ::= FOR_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LINER ::= WHILE_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINER ::= SWITCH_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LINER ::= IF_STATEMENT_DEF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LINER ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LINER ::= PARAMDECL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LINER ::= PRINTLN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LINER ::= RETURN_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LINER ::= BREAK_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LINER ::= INPUT_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NUMBERS ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i + ":" + "int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBERS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NUMBERS ::= FLOTANTE 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f + ":" + "float";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBERS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BOOL ::= TRUE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t + ":" + "bool";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BOOL ::= FALSE 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f + ":" + "bool";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= EXP_REL_LOG ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP_ARIT ::= EXP_ARIT PLUS TERM 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            String[] info1 = e.toString().split(":");
                                            String[] info2 = t.toString().split(":");
                                            if(!validarOperacionIntFloat(info1[0], info2[0])) { 
                                                System.out.println("Parser: Err: Los operandos deben ser el mismo tipo" + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1)); System.exit(0); 
                                                RESULT = "null:null";
                                            }
                                            else {

                                                String baseTemp = "t";
                                                if(info1[0].equals("float")) { baseTemp = "f";}
                                                
                                                String miTempId = baseTemp + currentTemp++;
                                                cod3D.append("\n" + miTempId + "=" + info1[1] + "+" + info2[1]);

                                                //String miTempId = baseTemp + currentTemp++; 
                                                RESULT = info1[0] +  ":" +  miTempId;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP_ARIT ::= EXP_ARIT MINUS TERM 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                String[] info1 = e.toString().split(":");
                                                String[] info2 = t.toString().split(":");
                                                if(!validarOperacionIntFloat(info1[0], info2[0])) { 
                                                  System.out.println("Parser: Err: Los operandos deben ser el mismo tipo"+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                   RESULT = "null:null";}
                                                else { 
                                                    String baseTemp = "t";
                                                    if(info1[0].equals("float")) { baseTemp = "f";}

                                                    String miTempId = baseTemp + currentTemp++;
                                                    cod3D.append("\n" + miTempId + "=" + info1[1] + "+" + info2[1]);

                                                    RESULT = info1[0] +  ":" +  miTempId;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP_ARIT ::= TERM 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TERM ::= TERM TIMES FACTOR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        String[] info1 = t.toString().split(":");
                                        String[] info2 = f.toString().split(":");

                                        String baseTemp = "t"; 
                                        if(info1[0].equals("float")) { baseTemp = "f";} 
                                        String miTempId = baseTemp + currentTemp++;
                                        cod3D.append("\n" + miTempId + "=" + info1[1] + "*" + info2[1]);

                                        if(!validarOperacionIntFloat(info1[0], info2[0])) { 
                                            System.out.println("Parser: Err: Los operandos deben ser el mismo tipo" + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                             RESULT = "null:null";
                                        }
                                        else { RESULT = info1[0] +  ":" + miTempId;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TERM ::= TERM DIV FACTOR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        String[] info1 = t.toString().split(":");
                                        String[] info2 = f.toString().split(":");

                                        String baseTemp = "t"; 
                                        if(info1[0].equals("float")) { baseTemp = "f";} 
                                        String miTempId = baseTemp + currentTemp++;
                                        cod3D.append("\n" + miTempId + "=" + info1[1] + "/" + info2[1]);

                                        if(!validarOperacionIntFloat(info1[0], info2[0])) { 
                                            System.out.println("Parser: Err: Los operandos deben ser el mismo tipo" + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                            RESULT = "null:null";
                                        }
                                        else { RESULT = info1[0] +  ":" + miTempId;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TERM ::= TERM POT FACTOR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        String[] info1 = t.toString().split(":");
                                        String[] info2 = f.toString().split(":");

                                        String baseTemp = "t";  
                                        if(info1[0].equals("float")) { baseTemp = "f";}
                                        String miTempId = baseTemp + currentTemp++;
                                        cod3D.append("\n" + miTempId + "=" + info1[1] + "^" + info2[1]);

                                        if(!validarOperacionIntFloat(info1[0], info2[0])) { 
                                            System.out.println("Parser: Err: Los operandos deben ser el mismo tipo" + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                            RESULT = "null:null";
                                        } 
                                        else { RESULT = info1[0] +  ":" + miTempId; }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TERM ::= TERM MOD FACTOR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        String[] info1 = t.toString().split(":");
                                        String[] info2 = f.toString().split(":");

                                        String baseTemp = "t";  
                                        if(info1[0].equals("float")) { baseTemp = "f";}
                                        String miTempId = baseTemp + currentTemp++;
                                        cod3D.append("\n" + miTempId + "=" + info1[1] + "%" + info2[1]);

                                        if(!validarOperacionIntFloat(info1[0], info2[0])) {
                                            System.out.println("Parser: Err: Los operandos deben ser el mismo tipo" + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                            RESULT = "null:null";
                                        }
                                        else { RESULT = info1[0] +  ":" + miTempId; }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TERM ::= FACTOR 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT = f;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FACTOR ::= PARENTA EXP_ARIT PARENTC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= MINUS NUMBERS 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String baseTemp = "t";  
                                String[] info = n.toString().split(":");
                                if(info[1].equals("float")) { baseTemp = "f";}

                                String miTempId1 = baseTemp + currentTemp++;
                                String miTempId2 = baseTemp + currentTemp++;
                                String miTempId3 = baseTemp + currentTemp++;

                                cod3D.append("\n" + miTempId1 + "= -1");
                                cod3D.append("\n" + miTempId2 + "=" + info[0]);
                                cod3D.append("\n" + miTempId3 + "=" + miTempId1 + " * " + miTempId2);

                                RESULT = info[1] + ":" + miTempId3;
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= NUMBERS 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            String baseTemp = "t";  
                            String[] info = n.toString().split(":");
                            if(info[1].equals("float")) { baseTemp = "f";}
                            String miTempId = baseTemp + currentTemp++;
                            cod3D.append("\n" + miTempId + "=" + info[0]);
                            RESULT = info[1] + ":" + miTempId;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= STRING_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String miTempId = "t"+currentTemp++;
                                cod3D.append("\n" +  miTempId + "=" + s.toString());
                                RESULT = "String:" + miTempId; 
                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FACTOR ::= STRING_SINGLE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String miTempId = "t"+currentTemp++;
                                cod3D.append("\n" +  miTempId + "=" + s.toString());
                                RESULT = "String:" + miTempId;
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FACTOR ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String tipo = getTipo(i.toString()); 
                                                                    if(validarUsoVariable(i.toString())) {                              
                                                                        String baseTemp = "t";
                                                                        if (tipo.equals("float")) baseTemp = "f";
                                                                        String miTempId = baseTemp + currentTemp++;
                                                                        cod3D.append("\n" + miTempId + "=" + i.toString());
                                                                        RESULT = tipo +  ":" + miTempId;
                                                                    }
                                                                    else { System.out.println("Parser: Err: La variable no existe: " + i.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1)); 
                                                                        System.exit(0);
                                                                        RESULT = "null:null";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FACTOR ::= IDENTIFIER MINUSM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String tipo = getTipo(i.toString()); if(validarUsoVariable(i.toString())) {
                                                                                String baseTemp = "t";
                                                                                if (tipo.equals("float")) baseTemp = "f";
                                                                                String miTempId1 = baseTemp + currentTemp++;
                                                                                String miTempId2 = baseTemp + currentTemp++;
                                                                                String miTempId3 = baseTemp + currentTemp++;
                                                                                
                                                                                cod3D.append("\n" + miTempId1 + "= 1");
                                                                                cod3D.append("\n" + miTempId2 + "=" + i.toString());
                                                                                cod3D.append("\n" + miTempId3 + "=" + miTempId1 + "-" + miTempId2);
                                                                                RESULT = tipo +  ":" + miTempId3;
                                                                           }
                                                                           else { System.out.println("Parser: Err: La variable no existe: " + i.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                             RESULT = "null:null";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FACTOR ::= IDENTIFIER PLUSP 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String tipo = getTipo(i.toString()); if(validarUsoVariable(i.toString())) {
                                                                            
                                                                            String baseTemp = "t";
                                                                            if (tipo.equals("float")) baseTemp = "f";
                                                                            String miTempId1 = baseTemp + currentTemp++;
                                                                            String miTempId2 = baseTemp + currentTemp++;
                                                                            String miTempId3 = baseTemp + currentTemp++;
                                                                            
                                                                            cod3D.append("\n" + miTempId1 + "= 1");
                                                                            cod3D.append("\n" + miTempId2 + "=" + i.toString());
                                                                            cod3D.append("\n" + miTempId3 + "=" + miTempId1 + "+" + miTempId2);
                                                                            RESULT = tipo +  ":" + miTempId3;
                                                                         }
                                                                    else { System.out.println("Parser: Err: La variable no existe: " + i.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                      RESULT = "null:null";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FACTOR ::= INV_FUNC 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                           contar = 0;
                           currentParam = 0;
                           String[] info = f.toString().split(":");
                           String baseTemp = "t";
                           String miTempId = baseTemp + currentTemp++;
                           String miCall = "begin_func_" + info[0] ;
                           int cant = contarParametros(info[0]);
                           cod3D.append("\n" + miTempId + "= call " + miCall + ", " + cant);
                           RESULT = info[1] + ":" +miTempId;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FACTOR ::= INV_ARRAY 
            {
              String RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ia = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            String baseTemp = "t";
                            String miTempId = baseTemp + currentTemp++;
                            String[] info = ia.toString().split(":"); 
                            String tipo = getTipo(info[0]);
                            String miArray = info[0] + ", " +  info[1] ;
                            cod3D.append("\n" + miTempId + "= array " + miArray);
                            RESULT = tipo + ":" + miTempId;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP_ARIT_INTEGER ::= EXP_ARIT_INTEGER PLUS TERM_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT_INTEGER",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP_ARIT_INTEGER ::= EXP_ARIT_INTEGER MINUS TERM_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT_INTEGER",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP_ARIT_INTEGER ::= TERM_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT_INTEGER",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TERM_INTEGER ::= TERM_INTEGER TIMES FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TERM_INTEGER ::= TERM_INTEGER DIV FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TERM_INTEGER ::= TERM_INTEGER POT FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TERM_INTEGER ::= TERM_INTEGER MOD FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TERM_INTEGER ::= FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FACTOR_INTEGER ::= PARENTA EXP_ARIT_INTEGER PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FACTOR_INTEGER ::= NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FACTOR_INTEGER ::= IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            if (!validarUsoVariable(ID.toString())) {
                                System.out.println("Parser: Err : Variable " + ID.toString() + " no declarada." + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                            } 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FACTOR_INTEGER ::= IDENTIFIER PLUSP 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                if (!validarUsoVariable(ID.toString())) {
                                    System.out.println("Parser: Err : Variable " + ID.toString() + " no declarada." + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                } 
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FACTOR_INTEGER ::= IDENTIFIER MINUSM 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                if (!validarUsoVariable(ID.toString())) {
                                    System.out.println("Parser: Err : Variable " + ID.toString() + " no declarada." + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                } 
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FACTOR_INTEGER ::= MINUS NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTOR_INTEGER ::= INV_FUNC 
            {
              String RESULT =null;
		 contar = 0; currentParam = 0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTOR_INTEGER ::= INV_ARRAY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP_REL_LOG ::= EXP_REL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP_REL_LOG ::= EXP_LOG 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP_REL ::= EXP_ARIT OPER_REL EXP_ARIT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        //System.out.println(e1.toString());
                                                        //System.out.println(e2.toString());
                                                        
                                                        String[] info1 = e1.toString().split(":");
                                                        String[] info2 = e2.toString().split(":");
                                                        String[] info3 = op.toString().split(":");

                                                        String baseTemp = "t";
                                                        String miTempId = baseTemp + currentTemp++;
                                                        cod3D.append("\n" + miTempId + "=" +  info1[1] + info3[1] + info2[1]);

                                                        if(info1[0].equals(info2[0])) {
                                                            RESULT = "bool:" + miTempId;
                                                        } 
                                                        else { 
                                                            System.out.println("Parser: Err: El resultado de las operaciones debe ser entero o flotante : exp1: " + e1.toString() + " exp2: " + e2.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1)); System.exit(0);
                                                            RESULT = "null:null"; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP_REL ::= PARENTA EXP_REL PARENTC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP_REL ::= NOT PARENTA EXP_REL PARENTC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                String[] info = e.toString().split(":");
                                                String baseTemp = "t";
                                                String miTempId = baseTemp + currentTemp++;
                                                cod3D.append("\n" + miTempId + "= !" + info[1] );
                                                RESULT = info[0] +  ":" + info[1];
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP_REL ::= MINUS PARENTA EXP_REL_LOG PARENTC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP_REL ::= BOOL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        String baseTemp = "t";  
                        String[] info = b.toString().split(":");
                        String miTempId = baseTemp + currentTemp++;
                        
                        cod3D.append("\n" + miTempId + "=" + info[0]);
                        RESULT = info[1] + ":" + miTempId;
                        //System.out.println(RESULT);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP_LOG ::= OPER_LOG 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP_LOG ::= EXP_REL OPERA_LOG EXP_REL_LOG 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                                                    String[] info1 = e1.toString().split(":");
                                                    String[] info2 = e2.toString().split(":");
                                                    String[] info3 = op1.toString().split(":");

                                                    String baseTemp = "t";
                                                    String miTempId = baseTemp + currentTemp++;

                                                    cod3D.append("\n" + miTempId + "=" + info1[1] +  info3[1] + info2[1] );

                                                    if(info1[0].equals(info2[0])) {
                                                        RESULT = "bool:" +  miTempId;
                                                    }
                                                    else {
                                                        System.out.println("Parser: Err: Los operandos debe ser booleanos: oper1: " + e1.toString() + " oper2: " +  e2.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                        RESULT = "null:null";}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP_LOG ::= PARENTA EXP_REL OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                    String[] info1 = e1.toString().split(":");
                                                    String[] info2 = e2.toString().split(":");
                                                    String[] info3 = op1.toString().split(":");

                                                    String baseTemp = "t";
                                                    String miTempId = baseTemp + currentTemp++;

                                                    cod3D.append("\n" + miTempId + "=" + info1[1] +  info3[1] + info2[1] );

                                                    if(info1[0].equals(info2[0])) {
                                                        RESULT = "bool:" +  miTempId;
                                                    }
                                                    else {
                                                        System.out.println("Parser: Err: Los operandos debe ser booleanos: oper1: " + e1.toString() + " oper2: " +  e2.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                        RESULT = "null:null";}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP_LOG ::= NOT PARENTA EXP_REL OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                                                    String[] info1 = e1.toString().split(":");
                                                    String[] info2 = e2.toString().split(":");
                                                    String[] info3 = op1.toString().split(":");

                                                    String baseTemp = "t";
                                                    String miTempId = baseTemp + currentTemp++;

                                                    cod3D.append("\n" + miTempId + "=!" + info1[1] +  info3[1] + info2[1] );

                                                    if(info1[0].equals(info2[0])) {
                                                        RESULT = "bool:" +  miTempId;
                                                    }
                                                    else {
                                                        System.out.println("Parser: Err: Los operandos debe ser booleanos: oper1: " + e1.toString() + " oper2: " +  e2.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                        RESULT = "null:null";}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP_LOG ::= IDENTIFIER OPERA_LOG EXP_REL_LOG 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String comp = getTipo(id.toString()); 
                                                    String[] info1 = id.toString().split(":");
                                                    String[] info2 = e.toString().split(":");
                                                    String[] info3 = op1.toString().split(":");

                                                    String baseTemp = "t";
                                                    String miTempId = baseTemp + currentTemp++;

                                                    cod3D.append("\n" + miTempId + "=" + info1[1] +  info3[1] + info2[1] );

                                                    if(info1[0].equals(info2[0])) {
                                                        RESULT = "bool:" +  miTempId;
                                                    }
                                                    else {
                                                        System.out.println("Parser: Err: Los operandos debe ser booleanos: oper1: " + info1[0] + " oper2: " +  info2[0] + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                        RESULT = "null:null";}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP_LOG ::= PARENTA IDENTIFIER OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String comp = getTipo(id.toString()); 
                                                    String[] info1 = id.toString().split(":");
                                                    String[] info2 = e.toString().split(":");
                                                    String[] info3 = op1.toString().split(":");

                                                    String baseTemp = "t";
                                                    String miTempId = baseTemp + currentTemp++;

                                                    cod3D.append("\n" + miTempId + "=" + info1[1] +  info3[1] + info2[1] );

                                                    if(info1[0].equals(info2[0])) {
                                                        RESULT = "bool:" +  miTempId;
                                                    }
                                                    else {
                                                        System.out.println("Parser: Err: Los operandos debe ser booleanos: oper1: " + info1[0] + " oper2: " +  info2[0] + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1) );System.exit(0);
                                                        RESULT = "null:null";}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP_LOG ::= NOT PARENTA IDENTIFIER OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                    String[] info1 = id.toString().split(":");
                                                    String[] info2 = e.toString().split(":");
                                                    String[] info3 = op1.toString().split(":");

                                                    String baseTemp = "t";
                                                    String miTempId = baseTemp + currentTemp++;

                                                    cod3D.append("\n" + miTempId + "=!" + info1[1] +  info3[1] + info2[1] );

                                                    if(info1[0].equals(info2[0])) {
                                                        RESULT = "bool:" +  miTempId;
                                                    }
                                                    else {
                                                        System.out.println("Parser: Err: Los operandos debe ser booleanos: oper1: " + info1[0] + " oper2: " +  info2[0] + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                        RESULT = "null:null";}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPER_LOG ::= EXP_ARIT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        String[] info = e.toString().split(":");
                        RESULT = e;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_LOG",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPER_REL ::= GREATERT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "bool:" + op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPER_REL ::= GREATERE 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "bool:" + op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPER_REL ::= LOWERT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "bool:" + op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPER_REL ::= LOWERE 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "bool:" + op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPER_REL ::= EQEQ 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "bool:" + op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPER_REL ::= NOTEQUALS 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "bool:" + op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERA_LOG ::= DISJUNTION 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "bool:" +  d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERA_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERA_LOG ::= CONJUNTION 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "bool:" + c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERA_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIG ::= IDENTIFIER EQ VALUE ENDLINE 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                    String[] tipoAsig = v.split(":");
                                    String tipovar = getTipo(ID.toString());
                                    if (validarUsoVariable(ID.toString())) {
                                        if(!tipovar.equals(tipoAsig[0])){
                                            System.out.println("Parser: Err : Asignacion: " + ID.toString() + " tipos no compatibles." + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                        }
                                    } else {System.out.println("Parser: Err : Variable: " + ID.toString() + " no declarada."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);}
                                    String[] info = v.toString().split(":");
                                    String baseTemp = "t";
                                    String miTempId = baseTemp + currentTemp++;
                                    cod3D.append("\n" + miTempId + " = " + info[1]);
                                    cod3D.append("\n" + ID.toString() + " = " + miTempId);

                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECL ::= GLOB SEP TYPES SEP IDENTIFIER ENDLINE 
            {
              String RESULT =null;
		int tglobleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tglobright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tglob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(validarScopeVariablesGlobales(ID.toString())) { 
                                                        TablaSimbolos.get(globalHash).add("variableGLob: " + ID.toString() + ":" + tglob.toString());

                                                        cod3D.append("\nglobal_data_" + tglob.toString() + " " + ID.toString());

                                                        } else {System.out.println("Parser: Err : Variable global ya declarada: " + ID.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECL ::= GLOB SEP TYPES SEP IDENTIFIER EQ VALUE ENDLINE 
            {
              String RESULT =null;
		int tglobleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tglobright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String tglob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		String[] info = v.toString().split(":"); 
                                                                    //System.out.println("here no problem");
                                                                    if(validarScopeVariablesGlobales(ID.toString())) {
                                                                        //System.out.println(info[0]);
                                                                        if(tglob.toString().equals(info[0])) {
                                                                            TablaSimbolos.get(globalHash).add("variableGLob: " + ID.toString() + ":" + tglob.toString());
                                                                            cod3D.append("\nglobal_data_" + tglob.toString() + " " + ID.toString());
                                                                            cod3D.append("\n" + ID.toString() + "=" + info[1]);
                                                                            }
                                                                        else {System.out.println("Parser: Err : El valor asignado no es compatible con el tipo declarado de la variable: " + ID.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);}

                                                                     } else {System.out.println("Parser: Err : Variable global ya declarada: " + ID.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECL ::= GLOB SEP TYPES SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC ENDLINE 
            {
              String RESULT =null;
		int tglobleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tglobright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String tglob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                                                                                        if(validarScopeVariablesGlobales(ID.toString())) {
                                                                                            if (tglob.toString().equals("int") || tglob.toString().equals("char")){
                                                                                                TablaSimbolos.get(globalHash).add("GlobArray: " + ID.toString() + ":" + tglob.toString());
                                                                                                cod3D.append("\nglobal_data_array" + tglob.toString() + " " + ID.toString());
                                                                                            }  
                                                                                            else {
                                                                                                System.out.println("Parser: Err : El array solo permite ser de tipo int o char" + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                                            }
                                                                                        } 
                                                                                        else {
                                                                                            System.out.println("Parser: Err : Variable global ya declarada: " + ID.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                                        } 
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECL ::= GLOB SEP TYPES SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC EQ VALUE_LIST ENDLINE 
            {
              String RESULT =null;
		int tglobleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tglobright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String tglob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                        if(validarScopeVariablesGlobales(ID.toString())) {
                                                                                            if (tglob.toString().equals("int") || tglob.toString().equals("char")){
                                                                                                TablaSimbolos.get(globalHash).add("GlobArray: " + ID.toString() + ":" + tglob.toString());
                                                                                                cod3D.append("\nglobal_data_array " + tglob.toString() + " " + ID.toString());
                                                                                            }  
                                                                                            else {
                                                                                                System.out.println("Parser: Err : El array solo permite ser de tipo int o char" + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                                            }
                                                                                        } 
                                                                                        else {
                                                                                            System.out.println("Parser: Err : Variable global ya declarada: " + ID.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                                        } 
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLOC ::= LOC SEP TYPES SEP IDENTIFIER ENDLINE 
            {
              String RESULT =null;
		int tlocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tlocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tloc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                          if(validarScopeVariables(ID.toString())){
                                                            TablaSimbolos.get(currentHash).add("variableLoc: " + ID.toString() + ":" + tloc.toString());
                                                            cod3D.append("\nlocal_data_" + tloc.toString() + " " + ID.toString());
                                                          } else {System.out.println("Parser: Err : Variable ya declarada: " + ID.toString() + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);}
                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLOC",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLOC ::= LOC SEP TYPES SEP IDENTIFIER EQ VALUE ENDLINE 
            {
              String RESULT =null;
		int tlocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tlocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String tloc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                    String[] info = v.toString().split(":"); 
                                                                   if(validarScopeVariables(ID.toString())){
                                                                        if(tloc.toString().equals(info[0])) {
                                                                            TablaSimbolos.get(currentHash).add("variableLoc: " + ID.toString() + ":" + tloc.toString());
                                                                        
                                                                            String baseTemp = "t";
                                                                            String miTempId = baseTemp + currentTemp++;
                                                                            cod3D.append("\nlocal_data_" + tloc.toString() + " " + ID.toString());
                                                                            cod3D.append("\n" + miTempId + " = " + info[1]);
                                                                            cod3D.append("\n" + ID.toString() + " = " + miTempId);
                                                                            }

                                                                        else {System.out.println("Parser: Err : El valor asignado no es compatible con el tipo declarado de la variable: " + ID.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);} 
                                                                   } else {System.out.println("Parser: Err : Variable ya declarada: " + ID.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);}
                                                                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLOC",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLOC ::= LOC SEP TYPES SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC ENDLINE 
            {
              String RESULT =null;
		int tlocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tlocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String tloc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                                                                                    if(validarScopeVariablesGlobales(ID.toString())) {
                                                                                        if (tloc.toString().equals("int") || tloc.toString().equals("char")){
                                                                                            TablaSimbolos.get(currentHash).add("GlobArray: " + ID.toString() + ":" + tloc.toString());
                                                                                            cod3D.append("\nlocal_data_array" + tloc.toString() + " " + ID.toString());
                                                                                        }  
                                                                                        else {
                                                                                            System.out.println("Parser: Err : El array solo permite ser de tipo int o char"+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                                        }
                                                                                    } 
                                                                                    else {
                                                                                        System.out.println("Parser: Err : Variable global ya declarada: " + ID.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                                    } 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLOC",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLOC ::= LOC SEP TYPES SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC EQ PARENTCA VALUE_LIST PARENTCC ENDLINE 
            {
              String RESULT =null;
		int tlocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tlocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String tloc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                                                                                    if(validarScopeVariablesGlobales(ID.toString())) {
                                                                                        if (tloc.toString().equals("int") || tloc.toString().equals("char")){
                                                                                            TablaSimbolos.get(currentHash).add("GlobArray: " + ID.toString() + ":" + tloc.toString());
                                                                                            cod3D.append("\nlocal_data_array" + tloc.toString() + " " + ID.toString());
                                                                                        }  
                                                                                        else {
                                                                                            System.out.println("Parser: Err : El array solo permite ser de tipo int o char"+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                                        }
                                                                                    } 
                                                                                    else {
                                                                                        System.out.println("Parser: Err : Variable global ya declarada: " + ID.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                                    } 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLOC",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TYPES ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "String"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TYPES ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TYPES ::= STRINGC 
            {
              String RESULT =null;
		 RESULT = "String"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TYPES ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TYPES ::= BOOOLEANF 
            {
              String RESULT =null;
		 RESULT = "bool"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALUE ::= EXP_REL_LOG 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        String[] info = e.toString().split(":");
                        RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCTION_STATEMENT ::= FUNC SEP INT SEP MAIN 
            {
              String RESULT =null;
		          
                                                        RESULT = "main";
                                                        cod3D.append("\n\nbegin_func_main: ");  
                                                        String tipo;
                                                        if (flagMain){ System.out.println("Parser: err: dos o mas mains declarados."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);}
                                                        else{
                                                         flagMain = true;
                                                         tipo = "tipo:Main:int";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = "main";
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                        }
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCTION_STATEMENT ::= FUNC SEP INT SEP IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        RESULT = ID.toString();
                                                        cod3D.append("\n\nbegin_func_" + ID.toString() +  ":");  
                                                        if (validarNombreFuncion(ID.toString())) {
                                                            String tipo = "tipo:func:int";
                                                            ArrayList<String> fun = new ArrayList<String>();
                                                            currentHash = ID.toString();
                                                            fun.add(tipo);
                                                            TablaSimbolos.put(currentHash, fun);
                                                        } else {
                                                            System.out.println("Parser: Err : Nombre de funcion ya declarada: " + ID.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                        }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCTION_STATEMENT ::= FUNC SEP FLOAT SEP IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                        RESULT = ID.toString();
                                                        cod3D.append("\n\nbegin_func_" + ID.toString() +  ":");  
                                                        if (validarNombreFuncion(ID.toString())) {
                                                            String tipo = "tipo:func:float";
                                                            ArrayList<String> fun = new ArrayList<String>();
                                                            currentHash = ID.toString();
                                                            fun.add(tipo);
                                                            TablaSimbolos.put(currentHash, fun);
                                                        } else {
                                                            System.out.println("Parser: Err : Nombre de funcion ya declarada: " + ID.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                        }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCTION_STATEMENT ::= FUNC SEP BOOOLEANF SEP IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                        RESULT = ID.toString();
                                                        cod3D.append("\n\nbegin_func_" + ID.toString() +  ":");  
                                                        if (validarNombreFuncion(ID.toString())) {
                                                            String tipo = "tipo:func:bool";
                                                            ArrayList<String> fun = new ArrayList<String>();
                                                            currentHash = ID.toString();
                                                            fun.add(tipo);
                                                            TablaSimbolos.put(currentHash, fun);
                                                        } else {
                                                            System.out.println("Parser: Err : Nombre de funcion ya declarada: " + ID.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                        }
                                                        
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCTION_STATEMENT ::= FUNC SEP CHAR SEP IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                        RESULT = ID.toString();
                                                        cod3D.append("\n\nbegin_func_" + ID.toString() +  ":");  
                                                        if (validarNombreFuncion(ID.toString())) {
                                                            String tipo = "tipo:func:char";
                                                            ArrayList<String> fun = new ArrayList<String>();
                                                            currentHash = ID.toString();
                                                            fun.add(tipo);
                                                            TablaSimbolos.put(currentHash, fun);
                                                        } else {
                                                            System.out.println("Parser: Err : Nombre de funcion ya declarada: " + ID.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                        }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCTION_STATEMENT ::= FUNC SEP STRINGC SEP IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                        RESULT = ID.toString();
                                                        cod3D.append("\n\nbegin_func_" + ID.toString() +  ":"); 
                                                        if (validarNombreFuncion(ID.toString())) {
                                                            String tipo = "tipo:func:string";
                                                            ArrayList<String> fun = new ArrayList<String>();
                                                            currentHash = ID.toString();
                                                            fun.add(tipo);
                                                            TablaSimbolos.put(currentHash, fun);
                                                        } else {
                                                            System.out.println("Parser: Err : Nombre de funcion ya declarada: " + ID.toString()+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                        }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNC_STAT_DEF ::= FUNCTION_STATEMENT UNDERS LINE UNDERS 
            {
              String RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                                                            String name = fs; 
                                                            int cant = contarParametros(fs); 
                                                            currentTemp = 1; 
                                                            cantidadParametros.put(name, cant);
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_STAT_DEF",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INV_FUNC ::= IDENTIFIER PARENTA PARENTC 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            RESULT = ID.toString()  + ":" + getTipoFunc(ID.toString());
                                            if (validarFuncionExistente(ID.toString())) {
                                                int parametrosEsperados = contar;
                                                if (parametrosEsperados != 0) {
                                                    System.out.println("Parser: Err : La funcion " + ID.toString() + " espera " + parametrosEsperados + " parametros." + ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                }
                                            } else {
                                                System.out.println("Parser: Err : La funcion " + ID.toString() + " no esta definida."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                            }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INV_FUNC",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INV_FUNC ::= INV_FUNC_DEF PARAMS PARENTC 
            {
              String RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cparam = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = in;
                                                    String[] info = in.split(":");
                                                    int parametrosEsperados = contarParametros(info[0]);
                                                    int parametrosRecibidos = contar;
                                                    if (parametrosEsperados != parametrosRecibidos) {
                                                        System.out.println("Parser: Err : La funcion " + info[0] + " espera " + parametrosEsperados + " parametros, pero se pasaron " + parametrosRecibidos + "."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                    }
                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INV_FUNC",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INV_FUNC_DEF ::= IDENTIFIER PARENTA 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                                        RESULT = ID.toString()  + ":" + getTipoFunc(ID.toString());
                                        currentParam = 0;
                                        if (validarFuncionExistente(ID.toString())) {
                                            identParam(ID.toString());
                                        } else {
                                            System.out.println("Parser: Err : La funcion " + ID.toString() + " no esta definida."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                        }
                                    
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INV_FUNC_DEF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMS ::= PARAMETER COMA PARAMS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                    String[] info = v.toString().split(":");
                                    //System.out.println(paramlist.toString());
                                    //System.out.println(currentParam);
                                    if (currentParam < paramlist.size()){
                                        if( !(info[0].equals(paramlist.get(currentParam)))){
                                        System.out.println("Parser: Err : Los parametros no son compatibles"+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                        } 
                                        currentParam++;
                                    } else{System.out.println("Parser: Err : Cantidad de parametros incompatible"+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);}
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMS ::= PARAMETER 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMETER ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 contar++; RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMDECL ::= PARAM SEP TYPES SEP IDENTIFIER ENDLINE 
            {
              String RESULT =null;
		int tparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tparam = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                TablaSimbolos.get(currentHash).add("parametro : "+ ID.toString() + ":" + tparam.toString());
                                                                cod3D.append("\nParam " + ID.toString());
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMDECL",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INV_ARRAY ::= IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = ID.toString() +":" + i.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INV_ARRAY",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALUE_LIST ::= VALUE COMA VALUE_LIST 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            String[] info1 = v.toString().split(":"); 
                                            String[] info2 = vl.toString().split(":"); 
                                            if(info1[0].toString().equals(info2[0])) { 
                                                RESULT = v.toString(); 
                                                String baseTemp = "t";
                                                String miTempId = baseTemp + currentTemp++;
                                                cod3D.append("\nArrayElement " + miTempId + " = " + info1[1]);
                                            }
                                            else { RESULT = "null:null"; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_LIST",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALUE_LIST ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
                            String[] info1 = v.toString().split(":"); 
                            String baseTemp = "t";
                            String miTempId = baseTemp + currentTemp++;
                            cod3D.append("\nArrayElement " + miTempId + " = " + info1[1]);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_LIST",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PRINTLN ::= PRINTF PARENTA PARENTC ENDLINE 
            {
              String RESULT =null;
		 cod3D.append("\nprint '\n'");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PRINTLN ::= PRINTF PARENTA STRING_LITERAL PARENTC ENDLINE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 cod3D.append("\nprint '" + s.toString() + "'");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PRINTLN ::= PRINTF PARENTA STRING_SINGLE PARENTC ENDLINE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 cod3D.append("\nprint '" + s.toString() + "'");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PRINTLN ::= PRINTF PARENTA IDENTIFIER PARENTC ENDLINE 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 cod3D.append("\nprint " + id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INPUT_STATEMENT ::= READ PARENTA IDENTIFIER PARENTC ENDLINE 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUT_STATEMENT",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IF_STATEMENT_DEF ::= IF_STATEMENT IF_STATEMENT_CONTENT ELSE_STATEMENT 
            {
              String RESULT =null;
		
                                                                        cod3D.append("\n\nbegin_end_if_" + (currentIf - 1) +  ":"); 
                                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT_DEF",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IF_STATEMENT ::= IF PARENTA EXP_REL_LOG PARENTC 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                String[] info = exp.toString().split(":");
                                                cod3D.append("\nif " + info[1] +  " goto begin_if_" + (currentIf));
                                                cod3D.append("\ngoto " + "begin_end_if_" + (currentIf));
                                                cod3D.append("\n\nbegin_if_" + currentIf++ +  ":"); 
                                                 
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IF_STATEMENT_CONTENT ::= UNDERS LINE UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT_CONTENT",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ELSE_STATEMENT ::= ELSE_STATEMENT_CONTENT UNDERS LINE UNDERS 
            {
              String RESULT =null;
		cod3D.append("\n\nbegin_end_else_" + (currentElse - 1) +  ":");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ELSE_STATEMENT ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ELSE_STATEMENT_CONTENT ::= ELSE 
            {
              String RESULT =null;
		
                            cod3D.append("\n\nbegin_else_" + currentElse++ +  ":"); 
                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT_CONTENT",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // WHILE_STATEMENT ::= WHILE_STATEMENT_DEF UNDERS LINE UNDERS 
            {
              String RESULT =null;
		
                                                            
                                                            cod3D.append("\nif " + currentWhileCon + " goto begin_while_" + (currentWhile - 1));
                                                            cod3D.append("\n\nbegin_end_while_" + (currentWhile - 1) +  ":");
                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STATEMENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // WHILE_STATEMENT_DEF ::= WHILE PARENTA EXP_REL_LOG PARENTC 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                String[] info = exp.toString().split(":");
                                                currentWhileCon = info[1];
                                                cod3D.append("\nif " + info[1] +  " goto begin_while_" + (currentWhile));
                                                cod3D.append("\ngoto " + "begin_end_while_" + (currentWhile));
                                                cod3D.append("\n\nbegin_while_" + currentWhile++ +  ":"); 
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STATEMENT_DEF",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FOR_STATEMENT_DEF ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT PARENTC 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                    String[] info = exp1.toString().split(":");
                                                                    if (info[0].equals("int")) {
                                                                        cod3D.append("\n\nbegin_for_" + currentFor++ +  ":");
                                                                        cod3D.append("\ndataint cant");
                                                                        cod3D.append("\ndataint cont");
                                                                        cod3D.append("\ncant =" + info[1]);
                                                                        cod3D.append("\ncont = 0");

                                                                    } else {
                                                                        System.out.println("Parser: Err: El valor de los parametros del for deben ser enteros."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                    }
                                                                    RESULT = info[1] + ":null";
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT_DEF",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FOR_STATEMENT_DEF ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT COMA EXP_ARIT PARENTC 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                    String[] info1 = exp1.toString().split(":");
                                                                    String[] info2 = exp2.toString().split(":");
                                                                    if (info1[0].equals("int") && info2[0].equals("int")) {
                                                                        cod3D.append("\n\nbegin_for_" + currentFor++ +  ":");
                                                                        cod3D.append("\ndataint cant");
                                                                        cod3D.append("\ndataint cont");
                                                                        cod3D.append("\ndataint init");
                                                                        cod3D.append("\ncant " + info1[1]);
                                                                        cod3D.append("\ncont = 0");
                                                                        cod3D.append("\ninit " + info2[1]);
                                                                    } else {
                                                                        System.out.println("Parser: Err: El valor de los parametros del for deben ser enteros."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                    }
                                                                    RESULT = info1[1] + ":null";
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT_DEF",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FOR_STATEMENT_DEF ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT COMA EXP_ARIT COMA EXP_ARIT PARENTC 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String exp3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                    String[] info1 = exp1.toString().split(":");
                                                                    String[] info2 = exp2.toString().split(":");
                                                                    String[] info3 = exp3.toString().split(":");
                                                                    if (info1[0].equals("int") && info2[0].equals("int") && info3[0].equals("int")) {
                                                                        cod3D.append("\n\nbegin_for_" + currentFor++ +  ":");
                                                                        
                                                                        cod3D.append("\ndataint cant");
                                                                        cod3D.append("\ndataint cont");
                                                                        cod3D.append("\ndataint init");
                                                                        cod3D.append("\ndataint jump");

                                                                        cod3D.append("\ncant =" + info1[1]);
                                                                        cod3D.append("\ncont = " + info2[1]);
                                                                        cod3D.append("\ninit =" + info2[1]);
                                                                        cod3D.append("\njump =" + info3[1]);
                                                                    } else {
                                                                        System.out.println("Parser: Err: El valor de los parametros del for deben ser enteros."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                                    }
                                                                    RESULT = info1[1] + ":" + info3[1];
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT_DEF",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FOR_STATEMENT ::= FOR_STATEMENT_DEF UNDERS LINE UNDERS 
            {
              String RESULT =null;
		int fsdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fsdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fsd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                            String[] info = fsd.toString().split(":");
                                                            if(info[1].equals("null")) {
                                                                cod3D.append("\nt" +  currentTemp++ + " = 1");
                                                                cod3D.append("\nt" +  currentTemp++ + " = " + info[0] +  " + t" + (currentTemp - 2));
                                                                cod3D.append("\n" +  info[0] + " = t" + (currentTemp - 1));
                                                                cod3D.append("\nif " + info[0] +  " != cont goto begin_for_" + (currentFor - 1));
                                                                cod3D.append("\ngoto end_for_" + (currentFor - 1));
                                                                cod3D.append("\nend_for_" + (currentFor - 1) +  ":");
                                                            } else {
                                                                cod3D.append("\nt" +  currentTemp++ + " = " + info[0] +  " + " + info[1]);
                                                                cod3D.append("\n" +  info[0] + " = " + (currentTemp - 1));
                                                                cod3D.append("\nif " + info[0] +  " != cont goto begin_for_" + (currentFor - 1));
                                                                cod3D.append("\ngoto end_for_" + (currentFor - 1));
                                                                cod3D.append("\nend_for_" + (currentFor - 1) +  ":");
                                                            }

                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SWITCH_STATEMENT ::= SWITCH_STATEMENT_DEF UNDERS CASE_LIST UNDERS 
            {
              String RESULT =null;
		
                                                                    cod3D.append("\n\nend_switch_" + (currentSwitch - 1) +  ":");
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_STATEMENT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SWITCH_STATEMENT_DEF ::= SWITCH PARENTA EXP_ARIT PARENTC 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                            String[] info = exp.toString().split(":");
                                                            currentCase = 1;
                                                            //validarScopeVariablesGlobales
                                                            //validarScopeVariables
                                                            if(info[0].equals("int")) {
                                                                cod3D.append("\n\nbegin_switch_" + currentSwitch++ +  ":");
                                                                cod3D.append("\nt" + currentTemp++ +  " = " + info[1]);
                                                                currentSwitchValue = info[1];
                                                                cod3D.append("\ndataint flag");
                                                                cod3D.append("\nt" +  currentTemp++ + " = 0");
                                                                cod3D.append("\nflag = " + "t" + (currentTemp - 1));
                                                            } else {
                                                                System.out.println("Parser: Err: El resultado de la expresion o identificador de un switch debe ser entero"+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                                            }
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_STATEMENT_DEF",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CASE_LIST ::= CASE_LIST_DEF LINE DECLENDCASE CASE_LIST 
            {
              String RESULT =null;
		int csdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int csdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String csd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                            String[] info = csd.toString().split(":");
                                            if(info[0].equals("null")) {
                                                System.out.println("Parser: Err: El valor asignado del case debe ser un numero entero."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                            } 
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CASE_LIST ::= CASE_LIST_DEF LINE 
            {
              String RESULT =null;
		int csdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String csd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    String[] info = csd.toString().split(":");
                                    if(info[0].equals("null")) {
                                        System.out.println("Parser: Err: El valor asignado del case debe ser un numero entero."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                    }
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CASE_LIST ::= DEFAULT SEP LINE 
            {
              String RESULT =null;
		
                                 cod3D.append("\n\nbegin_default_" + (currentSwitch - 1) + currentDefault + ":");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CASE_LIST ::= DEFAULT SEP 
            {
              String RESULT =null;
		
                            cod3D.append("\n\nbegin_default_" + (currentSwitch - 1) + currentDefault +  ":"); 
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CASE_LIST ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLENDCASE ::= 
            {
              String RESULT =null;
		

                cod3D.append("\nend_case_" + (currentSwitch - 1) + (currentCase - 1) + ":");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLENDCASE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CASE_LIST_DEF ::= CASE SEP EXP_ARIT SEP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        String[] info = exp.toString().split(":");
                                        if(info[0].equals("int")) {
                                            cod3D.append("\nt" + currentTemp++ +  " = " +  "flag");
                                            cod3D.append("\nt" + currentTemp++ +  " = " +  "1");
                                            cod3D.append("\nif t"  + (currentTemp - 1) + " == t" + (currentTemp - 2) + " goto begin_case_" + (currentSwitch - 1) + currentCase);
                                            cod3D.append("\nif " + info[1] + "==" + currentSwitchValue + " goto begin_case_" + (currentSwitch - 1) + currentCase++);
                                            cod3D.append("\ngoto end_case_" + (currentSwitch - 1) + (currentCase - 1));

                                            cod3D.append("\n\nbegin_case_" + (currentSwitch - 1) + (currentCase - 1));
                                            cod3D.append("\nt" + currentTemp +  " = " +  "1");
                                            cod3D.append("\nflag" + " = t" + currentTemp++);
                                            RESULT = (currentSwitch - 1) +  ":" + (currentCase - 1);
                                        } else {
                                            System.out.println("Parser: Err: El valor asignado del case debe ser un numero entero."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1));System.exit(0);
                                            RESULT = "null:null";
                                        }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST_DEF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // RETURN_STATEMENT ::= RETURN ENDLINE 
            {
              String RESULT =null;
		 System.out.println("Parser: Err: El retorno no puede ser vacio."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1)); System.exit(0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STATEMENT",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // RETURN_STATEMENT ::= RETURN SEP VALUE ENDLINE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                
                                                String[] info = v.toString().split(":"); 
                                                boolean retorno = validarRetorno(info[0]);

                                                cod3D.append("\nretorno = " + info[1]);  
                                                if(!retorno) { 
                                                    System.out.println("Parser: Err: El tipo de retorno no es compatible con el tipo de la funcion."+ ": Linea : " + (currentSymbol.left + 1) +": Columna : " + (currentSymbol.right + 1)); System.exit(0);
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STATEMENT",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BREAK_STATEMENT ::= BREAK ENDLINE 
            {
              String RESULT =null;
		 cod3D.append("\ngoto end_switch_" + (currentSwitch - 1));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK_STATEMENT",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
